/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommentUserMentionInfo
 */
export interface CommentUserMentionInfo {
    /**
     * 
     * @type {string}
     * @memberof CommentUserMentionInfo
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CommentUserMentionInfo
     */
    tag: string;
    /**
     * 
     * @type {string}
     * @memberof CommentUserMentionInfo
     */
    rawTag?: string;
    /**
     * 
     * @type {string}
     * @memberof CommentUserMentionInfo
     */
    type?: CommentUserMentionInfoTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CommentUserMentionInfo
     */
    sent?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum CommentUserMentionInfoTypeEnum {
    user = 'user',
    sso = 'sso'
}


/**
 * Check if a given object implements the CommentUserMentionInfo interface.
 */
export function instanceOfCommentUserMentionInfo(value: object): value is CommentUserMentionInfo {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tag' in value) || value['tag'] === undefined) return false;
    return true;
}

export function CommentUserMentionInfoFromJSON(json: any): CommentUserMentionInfo {
    return CommentUserMentionInfoFromJSONTyped(json, false);
}

export function CommentUserMentionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentUserMentionInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tag': json['tag'],
        'rawTag': json['rawTag'] == null ? undefined : json['rawTag'],
        'type': json['type'] == null ? undefined : json['type'],
        'sent': json['sent'] == null ? undefined : json['sent'],
    };
}

export function CommentUserMentionInfoToJSON(json: any): CommentUserMentionInfo {
    return CommentUserMentionInfoToJSONTyped(json, false);
}

export function CommentUserMentionInfoToJSONTyped(value?: CommentUserMentionInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'tag': value['tag'],
        'rawTag': value['rawTag'],
        'type': value['type'],
        'sent': value['sent'],
    };
}

