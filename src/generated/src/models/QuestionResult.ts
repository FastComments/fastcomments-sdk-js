/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MetaItem } from './MetaItem';
import {
    MetaItemFromJSON,
    MetaItemFromJSONTyped,
    MetaItemToJSON,
    MetaItemToJSONTyped,
} from './MetaItem';

/**
 * 
 * @export
 * @interface QuestionResult
 */
export interface QuestionResult {
    /**
     * 
     * @type {string}
     * @memberof QuestionResult
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionResult
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionResult
     */
    urlId: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionResult
     */
    anonUserId: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionResult
     */
    userId: string;
    /**
     * 
     * @type {Date}
     * @memberof QuestionResult
     */
    createdAt: Date;
    /**
     * 
     * @type {number}
     * @memberof QuestionResult
     */
    value: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionResult
     */
    commentId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionResult
     */
    questionId: string;
    /**
     * 
     * @type {Array<MetaItem>}
     * @memberof QuestionResult
     */
    meta?: Array<MetaItem> | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionResult
     */
    ipHash: string;
}

/**
 * Check if a given object implements the QuestionResult interface.
 */
export function instanceOfQuestionResult(value: object): value is QuestionResult {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('urlId' in value) || value['urlId'] === undefined) return false;
    if (!('anonUserId' in value) || value['anonUserId'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('questionId' in value) || value['questionId'] === undefined) return false;
    if (!('ipHash' in value) || value['ipHash'] === undefined) return false;
    return true;
}

export function QuestionResultFromJSON(json: any): QuestionResult {
    return QuestionResultFromJSONTyped(json, false);
}

export function QuestionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionResult {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'tenantId': json['tenantId'],
        'urlId': json['urlId'],
        'anonUserId': json['anonUserId'],
        'userId': json['userId'],
        'createdAt': (new Date(json['createdAt'])),
        'value': json['value'],
        'commentId': json['commentId'] == null ? undefined : json['commentId'],
        'questionId': json['questionId'],
        'meta': json['meta'] == null ? undefined : ((json['meta'] as Array<any>).map(MetaItemFromJSON)),
        'ipHash': json['ipHash'],
    };
}

export function QuestionResultToJSON(json: any): QuestionResult {
    return QuestionResultToJSONTyped(json, false);
}

export function QuestionResultToJSONTyped(value?: QuestionResult | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '_id': value['id'],
        'tenantId': value['tenantId'],
        'urlId': value['urlId'],
        'anonUserId': value['anonUserId'],
        'userId': value['userId'],
        'createdAt': ((value['createdAt']).toISOString()),
        'value': value['value'],
        'commentId': value['commentId'],
        'questionId': value['questionId'],
        'meta': value['meta'] == null ? undefined : ((value['meta'] as Array<any>).map(MetaItemToJSON)),
        'ipHash': value['ipHash'],
    };
}

