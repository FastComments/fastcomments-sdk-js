/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CommentUserBadgeInfo } from './CommentUserBadgeInfo';
import {
    CommentUserBadgeInfoFromJSON,
    CommentUserBadgeInfoFromJSONTyped,
    CommentUserBadgeInfoToJSON,
    CommentUserBadgeInfoToJSONTyped,
} from './CommentUserBadgeInfo';

/**
 * 
 * @export
 * @interface PublicComment
 */
export interface PublicComment {
    /**
     * 
     * @type {Date}
     * @memberof PublicComment
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    anonUserId?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    commenterName: string;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    commenterLink?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    commentHTML: string;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    parentId?: string;
    /**
     * 
     * @type {number}
     * @memberof PublicComment
     */
    votes?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicComment
     */
    votesUp?: number;
    /**
     * 
     * @type {number}
     * @memberof PublicComment
     */
    votesDown?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    verified: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    avatarSrc?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isSpam?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    hasImages?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isDeleted?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isDeletedUser?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isByAdmin?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isByModerator?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isPinned?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isLocked?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PublicComment
     */
    rating?: number;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    displayLabel?: string;
    /**
     * 
     * @type {Array<CommentUserBadgeInfo>}
     * @memberof PublicComment
     */
    badges?: Array<CommentUserBadgeInfo>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PublicComment
     */
    feedbackIds?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PublicComment
     */
    viewCount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    requiresVerification?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    editKey?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isUnread?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PublicComment
     */
    myVoteId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isVotedDown?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isVotedUp?: boolean;
    /**
     * This is always set when asTree=true
     * @type {boolean}
     * @memberof PublicComment
     */
    hasChildren?: boolean;
    /**
     * The total nested child count included in this response (may be more available w/ pagination) Only set with asTree=true, otherwise this will be null.
     * @type {number}
     * @memberof PublicComment
     */
    nestedChildrenCount?: number;
    /**
     * You must ask the API to count children (with asTree=true&countChildren=true), otherwise this will be null. This will be the complete direct child count, whereas children may only contain a subset based on pagination.
     * @type {number}
     * @memberof PublicComment
     */
    childCount?: number;
    /**
     * 
     * @type {Array<PublicComment>}
     * @memberof PublicComment
     */
    children?: Array<PublicComment>;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isFlagged?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PublicComment
     */
    isBlocked?: boolean;
}

/**
 * Check if a given object implements the PublicComment interface.
 */
export function instanceOfPublicComment(value: object): value is PublicComment {
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('commenterName' in value) || value['commenterName'] === undefined) return false;
    if (!('commentHTML' in value) || value['commentHTML'] === undefined) return false;
    if (!('verified' in value) || value['verified'] === undefined) return false;
    return true;
}

export function PublicCommentFromJSON(json: any): PublicComment {
    return PublicCommentFromJSONTyped(json, false);
}

export function PublicCommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): PublicComment {
    if (json == null) {
        return json;
    }
    return {
        
        'date': (new Date(json['date'])),
        'id': json['_id'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'anonUserId': json['anonUserId'] == null ? undefined : json['anonUserId'],
        'commenterName': json['commenterName'],
        'commenterLink': json['commenterLink'] == null ? undefined : json['commenterLink'],
        'commentHTML': json['commentHTML'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'votes': json['votes'] == null ? undefined : json['votes'],
        'votesUp': json['votesUp'] == null ? undefined : json['votesUp'],
        'votesDown': json['votesDown'] == null ? undefined : json['votesDown'],
        'verified': json['verified'],
        'avatarSrc': json['avatarSrc'] == null ? undefined : json['avatarSrc'],
        'isSpam': json['isSpam'] == null ? undefined : json['isSpam'],
        'hasImages': json['hasImages'] == null ? undefined : json['hasImages'],
        'isDeleted': json['isDeleted'] == null ? undefined : json['isDeleted'],
        'isDeletedUser': json['isDeletedUser'] == null ? undefined : json['isDeletedUser'],
        'isByAdmin': json['isByAdmin'] == null ? undefined : json['isByAdmin'],
        'isByModerator': json['isByModerator'] == null ? undefined : json['isByModerator'],
        'isPinned': json['isPinned'] == null ? undefined : json['isPinned'],
        'isLocked': json['isLocked'] == null ? undefined : json['isLocked'],
        'rating': json['rating'] == null ? undefined : json['rating'],
        'displayLabel': json['displayLabel'] == null ? undefined : json['displayLabel'],
        'badges': json['badges'] == null ? undefined : ((json['badges'] as Array<any>).map(CommentUserBadgeInfoFromJSON)),
        'feedbackIds': json['feedbackIds'] == null ? undefined : json['feedbackIds'],
        'viewCount': json['viewCount'] == null ? undefined : json['viewCount'],
        'requiresVerification': json['requiresVerification'] == null ? undefined : json['requiresVerification'],
        'editKey': json['editKey'] == null ? undefined : json['editKey'],
        'isUnread': json['isUnread'] == null ? undefined : json['isUnread'],
        'myVoteId': json['myVoteId'] == null ? undefined : json['myVoteId'],
        'isVotedDown': json['isVotedDown'] == null ? undefined : json['isVotedDown'],
        'isVotedUp': json['isVotedUp'] == null ? undefined : json['isVotedUp'],
        'hasChildren': json['hasChildren'] == null ? undefined : json['hasChildren'],
        'nestedChildrenCount': json['nestedChildrenCount'] == null ? undefined : json['nestedChildrenCount'],
        'childCount': json['childCount'] == null ? undefined : json['childCount'],
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(PublicCommentFromJSON)),
        'isFlagged': json['isFlagged'] == null ? undefined : json['isFlagged'],
        'isBlocked': json['isBlocked'] == null ? undefined : json['isBlocked'],
    };
}

export function PublicCommentToJSON(json: any): PublicComment {
    return PublicCommentToJSONTyped(json, false);
}

export function PublicCommentToJSONTyped(value?: PublicComment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'date': ((value['date']).toISOString()),
        '_id': value['id'],
        'userId': value['userId'],
        'anonUserId': value['anonUserId'],
        'commenterName': value['commenterName'],
        'commenterLink': value['commenterLink'],
        'commentHTML': value['commentHTML'],
        'parentId': value['parentId'],
        'votes': value['votes'],
        'votesUp': value['votesUp'],
        'votesDown': value['votesDown'],
        'verified': value['verified'],
        'avatarSrc': value['avatarSrc'],
        'isSpam': value['isSpam'],
        'hasImages': value['hasImages'],
        'isDeleted': value['isDeleted'],
        'isDeletedUser': value['isDeletedUser'],
        'isByAdmin': value['isByAdmin'],
        'isByModerator': value['isByModerator'],
        'isPinned': value['isPinned'],
        'isLocked': value['isLocked'],
        'rating': value['rating'],
        'displayLabel': value['displayLabel'],
        'badges': value['badges'] == null ? undefined : ((value['badges'] as Array<any>).map(CommentUserBadgeInfoToJSON)),
        'feedbackIds': value['feedbackIds'],
        'viewCount': value['viewCount'],
        'requiresVerification': value['requiresVerification'],
        'editKey': value['editKey'],
        'isUnread': value['isUnread'],
        'myVoteId': value['myVoteId'],
        'isVotedDown': value['isVotedDown'],
        'isVotedUp': value['isVotedUp'],
        'hasChildren': value['hasChildren'],
        'nestedChildrenCount': value['nestedChildrenCount'],
        'childCount': value['childCount'],
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(PublicCommentToJSON)),
        'isFlagged': value['isFlagged'],
        'isBlocked': value['isBlocked'],
    };
}

