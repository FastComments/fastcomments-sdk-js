/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AggregationValue
 */
export interface AggregationValue {
    /**
     * Construct a type with a set of properties K of type T
     * @type {{ [key: string]: string; }}
     * @memberof AggregationValue
     */
    groups?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof AggregationValue
     */
    stringValue?: string;
    /**
     * 
     * @type {number}
     * @memberof AggregationValue
     */
    numericValue?: number;
    /**
     * 
     * @type {number}
     * @memberof AggregationValue
     */
    distinctCount?: number;
    /**
     * Construct a type with a set of properties K of type T
     * @type {{ [key: string]: number; }}
     * @memberof AggregationValue
     */
    distinctCounts?: { [key: string]: number; };
}

/**
 * Check if a given object implements the AggregationValue interface.
 */
export function instanceOfAggregationValue(value: object): value is AggregationValue {
    return true;
}

export function AggregationValueFromJSON(json: any): AggregationValue {
    return AggregationValueFromJSONTyped(json, false);
}

export function AggregationValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): AggregationValue {
    if (json == null) {
        return json;
    }
    return {
        
        'groups': json['groups'] == null ? undefined : json['groups'],
        'stringValue': json['stringValue'] == null ? undefined : json['stringValue'],
        'numericValue': json['numericValue'] == null ? undefined : json['numericValue'],
        'distinctCount': json['distinctCount'] == null ? undefined : json['distinctCount'],
        'distinctCounts': json['distinctCounts'] == null ? undefined : json['distinctCounts'],
    };
}

export function AggregationValueToJSON(json: any): AggregationValue {
    return AggregationValueToJSONTyped(json, false);
}

export function AggregationValueToJSONTyped(value?: AggregationValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'groups': value['groups'],
        'stringValue': value['stringValue'],
        'numericValue': value['numericValue'],
        'distinctCount': value['distinctCount'],
        'distinctCounts': value['distinctCounts'],
    };
}

