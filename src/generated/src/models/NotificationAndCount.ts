/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NotificationType } from './NotificationType';
import {
    NotificationTypeFromJSON,
    NotificationTypeFromJSONTyped,
    NotificationTypeToJSON,
    NotificationTypeToJSONTyped,
} from './NotificationType';

/**
 * 
 * @export
 * @interface NotificationAndCount
 */
export interface NotificationAndCount {
    /**
     * 
     * @type {NotificationType}
     * @memberof NotificationAndCount
     */
    type: NotificationType;
    /**
     * 
     * @type {number}
     * @memberof NotificationAndCount
     */
    count: number;
}



/**
 * Check if a given object implements the NotificationAndCount interface.
 */
export function instanceOfNotificationAndCount(value: object): value is NotificationAndCount {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('count' in value) || value['count'] === undefined) return false;
    return true;
}

export function NotificationAndCountFromJSON(json: any): NotificationAndCount {
    return NotificationAndCountFromJSONTyped(json, false);
}

export function NotificationAndCountFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationAndCount {
    if (json == null) {
        return json;
    }
    return {
        
        'type': NotificationTypeFromJSON(json['type']),
        'count': json['count'],
    };
}

export function NotificationAndCountToJSON(json: any): NotificationAndCount {
    return NotificationAndCountToJSONTyped(json, false);
}

export function NotificationAndCountToJSONTyped(value?: NotificationAndCount | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': NotificationTypeToJSON(value['type']),
        'count': value['count'],
    };
}

