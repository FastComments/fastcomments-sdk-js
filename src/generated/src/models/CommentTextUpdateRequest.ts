/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CommentUserHashTagInfo } from './CommentUserHashTagInfo';
import {
    CommentUserHashTagInfoFromJSON,
    CommentUserHashTagInfoFromJSONTyped,
    CommentUserHashTagInfoToJSON,
    CommentUserHashTagInfoToJSONTyped,
} from './CommentUserHashTagInfo';
import type { CommentUserMentionInfo } from './CommentUserMentionInfo';
import {
    CommentUserMentionInfoFromJSON,
    CommentUserMentionInfoFromJSONTyped,
    CommentUserMentionInfoToJSON,
    CommentUserMentionInfoToJSONTyped,
} from './CommentUserMentionInfo';

/**
 * 
 * @export
 * @interface CommentTextUpdateRequest
 */
export interface CommentTextUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof CommentTextUpdateRequest
     */
    comment: string;
    /**
     * 
     * @type {Array<CommentUserMentionInfo>}
     * @memberof CommentTextUpdateRequest
     */
    mentions?: Array<CommentUserMentionInfo>;
    /**
     * 
     * @type {Array<CommentUserHashTagInfo>}
     * @memberof CommentTextUpdateRequest
     */
    hashTags?: Array<CommentUserHashTagInfo>;
}

/**
 * Check if a given object implements the CommentTextUpdateRequest interface.
 */
export function instanceOfCommentTextUpdateRequest(value: object): value is CommentTextUpdateRequest {
    if (!('comment' in value) || value['comment'] === undefined) return false;
    return true;
}

export function CommentTextUpdateRequestFromJSON(json: any): CommentTextUpdateRequest {
    return CommentTextUpdateRequestFromJSONTyped(json, false);
}

export function CommentTextUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentTextUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'comment': json['comment'],
        'mentions': json['mentions'] == null ? undefined : ((json['mentions'] as Array<any>).map(CommentUserMentionInfoFromJSON)),
        'hashTags': json['hashTags'] == null ? undefined : ((json['hashTags'] as Array<any>).map(CommentUserHashTagInfoFromJSON)),
    };
}

export function CommentTextUpdateRequestToJSON(json: any): CommentTextUpdateRequest {
    return CommentTextUpdateRequestToJSONTyped(json, false);
}

export function CommentTextUpdateRequestToJSONTyped(value?: CommentTextUpdateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'comment': value['comment'],
        'mentions': value['mentions'] == null ? undefined : ((value['mentions'] as Array<any>).map(CommentUserMentionInfoToJSON)),
        'hashTags': value['hashTags'] == null ? undefined : ((value['hashTags'] as Array<any>).map(CommentUserHashTagInfoToJSON)),
    };
}

