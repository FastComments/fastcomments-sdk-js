/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CommentUserBadgeInfo } from './CommentUserBadgeInfo';
import {
    CommentUserBadgeInfoFromJSON,
    CommentUserBadgeInfoFromJSONTyped,
    CommentUserBadgeInfoToJSON,
    CommentUserBadgeInfoToJSONTyped,
} from './CommentUserBadgeInfo';

/**
 * 
 * @export
 * @interface UserSessionInfo
 */
export interface UserSessionInfo {
    /**
     * 
     * @type {string}
     * @memberof UserSessionInfo
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserSessionInfo
     */
    authorized?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserSessionInfo
     */
    avatarSrc?: string | null;
    /**
     * 
     * @type {Array<CommentUserBadgeInfo>}
     * @memberof UserSessionInfo
     */
    badges?: Array<CommentUserBadgeInfo>;
    /**
     * 
     * @type {string}
     * @memberof UserSessionInfo
     */
    displayLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSessionInfo
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSessionInfo
     */
    email?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserSessionInfo
     */
    groupIds?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof UserSessionInfo
     */
    hasBlockedUsers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserSessionInfo
     */
    isAnonSession?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserSessionInfo
     */
    sessionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserSessionInfo
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSessionInfo
     */
    websiteUrl?: string;
}

/**
 * Check if a given object implements the UserSessionInfo interface.
 */
export function instanceOfUserSessionInfo(value: object): value is UserSessionInfo {
    return true;
}

export function UserSessionInfoFromJSON(json: any): UserSessionInfo {
    return UserSessionInfoFromJSONTyped(json, false);
}

export function UserSessionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSessionInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'authorized': json['authorized'] == null ? undefined : json['authorized'],
        'avatarSrc': json['avatarSrc'] == null ? undefined : json['avatarSrc'],
        'badges': json['badges'] == null ? undefined : ((json['badges'] as Array<any>).map(CommentUserBadgeInfoFromJSON)),
        'displayLabel': json['displayLabel'] == null ? undefined : json['displayLabel'],
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
        'email': json['email'] == null ? undefined : json['email'],
        'groupIds': json['groupIds'] == null ? undefined : json['groupIds'],
        'hasBlockedUsers': json['hasBlockedUsers'] == null ? undefined : json['hasBlockedUsers'],
        'isAnonSession': json['isAnonSession'] == null ? undefined : json['isAnonSession'],
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'username': json['username'] == null ? undefined : json['username'],
        'websiteUrl': json['websiteUrl'] == null ? undefined : json['websiteUrl'],
    };
}

export function UserSessionInfoToJSON(json: any): UserSessionInfo {
    return UserSessionInfoToJSONTyped(json, false);
}

export function UserSessionInfoToJSONTyped(value?: UserSessionInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'authorized': value['authorized'],
        'avatarSrc': value['avatarSrc'],
        'badges': value['badges'] == null ? undefined : ((value['badges'] as Array<any>).map(CommentUserBadgeInfoToJSON)),
        'displayLabel': value['displayLabel'],
        'displayName': value['displayName'],
        'email': value['email'],
        'groupIds': value['groupIds'],
        'hasBlockedUsers': value['hasBlockedUsers'],
        'isAnonSession': value['isAnonSession'],
        'sessionId': value['sessionId'],
        'username': value['username'],
        'websiteUrl': value['websiteUrl'],
    };
}

