/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CommentQuestionResultsRenderingType } from './CommentQuestionResultsRenderingType';
import {
    CommentQuestionResultsRenderingTypeFromJSON,
    CommentQuestionResultsRenderingTypeFromJSONTyped,
    CommentQuestionResultsRenderingTypeToJSON,
    CommentQuestionResultsRenderingTypeToJSONTyped,
} from './CommentQuestionResultsRenderingType';
import type { CommenterNameFormats } from './CommenterNameFormats';
import {
    CommenterNameFormatsFromJSON,
    CommenterNameFormatsFromJSONTyped,
    CommenterNameFormatsToJSON,
    CommenterNameFormatsToJSONTyped,
} from './CommenterNameFormats';
import type { SSOSecurityLevel } from './SSOSecurityLevel';
import {
    SSOSecurityLevelFromJSON,
    SSOSecurityLevelFromJSONTyped,
    SSOSecurityLevelToJSON,
    SSOSecurityLevelToJSONTyped,
} from './SSOSecurityLevel';
import type { QuestionWhenSave } from './QuestionWhenSave';
import {
    QuestionWhenSaveFromJSON,
    QuestionWhenSaveFromJSONTyped,
    QuestionWhenSaveToJSON,
    QuestionWhenSaveToJSONTyped,
} from './QuestionWhenSave';
import type { GifRating } from './GifRating';
import {
    GifRatingFromJSON,
    GifRatingFromJSONTyped,
    GifRatingToJSON,
    GifRatingToJSONTyped,
} from './GifRating';
import type { SpamRule } from './SpamRule';
import {
    SpamRuleFromJSON,
    SpamRuleFromJSONTyped,
    SpamRuleToJSON,
    SpamRuleToJSONTyped,
} from './SpamRule';
import type { ImageContentProfanityLevel } from './ImageContentProfanityLevel';
import {
    ImageContentProfanityLevelFromJSON,
    ImageContentProfanityLevelFromJSONTyped,
    ImageContentProfanityLevelToJSON,
    ImageContentProfanityLevelToJSONTyped,
} from './ImageContentProfanityLevel';
import type { CommentQuestionsRequired } from './CommentQuestionsRequired';
import {
    CommentQuestionsRequiredFromJSON,
    CommentQuestionsRequiredFromJSONTyped,
    CommentQuestionsRequiredToJSON,
    CommentQuestionsRequiredToJSONTyped,
} from './CommentQuestionsRequired';
import type { VoteStyle } from './VoteStyle';
import {
    VoteStyleFromJSON,
    VoteStyleFromJSONTyped,
    VoteStyleToJSON,
    VoteStyleToJSONTyped,
} from './VoteStyle';
import type { CommentThreadDeletionMode } from './CommentThreadDeletionMode';
import {
    CommentThreadDeletionModeFromJSON,
    CommentThreadDeletionModeFromJSONTyped,
    CommentThreadDeletionModeToJSON,
    CommentThreadDeletionModeToJSONTyped,
} from './CommentThreadDeletionMode';
import type { SortDirections } from './SortDirections';
import {
    SortDirectionsFromJSON,
    SortDirectionsFromJSONTyped,
    SortDirectionsToJSON,
    SortDirectionsToJSONTyped,
} from './SortDirections';
import type { QuestionSubQuestionVisibility } from './QuestionSubQuestionVisibility';
import {
    QuestionSubQuestionVisibilityFromJSON,
    QuestionSubQuestionVisibilityFromJSONTyped,
    QuestionSubQuestionVisibilityToJSON,
    QuestionSubQuestionVisibilityToJSONTyped,
} from './QuestionSubQuestionVisibility';
import type { QuestionRenderingType } from './QuestionRenderingType';
import {
    QuestionRenderingTypeFromJSON,
    QuestionRenderingTypeFromJSONTyped,
    QuestionRenderingTypeToJSON,
    QuestionRenderingTypeToJSONTyped,
} from './QuestionRenderingType';
import type { CommentHTMLRenderingMode } from './CommentHTMLRenderingMode';
import {
    CommentHTMLRenderingModeFromJSON,
    CommentHTMLRenderingModeFromJSONTyped,
    CommentHTMLRenderingModeToJSON,
    CommentHTMLRenderingModeToJSONTyped,
} from './CommentHTMLRenderingMode';

/**
 * 
 * @export
 * @interface CustomConfigParameters
 */
export interface CustomConfigParameters {
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    absoluteAndRelativeDates?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    absoluteDates?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    allowAnon?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    allowAnonFlag?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    allowAnonVotes?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomConfigParameters
     */
    allowedLanguages?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    collapseReplies?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomConfigParameters
     */
    commentCountFormat?: string | null;
    /**
     * 
     * @type {CommentHTMLRenderingMode}
     * @memberof CustomConfigParameters
     */
    commentHTMLRenderingMode?: CommentHTMLRenderingMode;
    /**
     * 
     * @type {CommentThreadDeletionMode}
     * @memberof CustomConfigParameters
     */
    commentThreadDeleteMode?: CommentThreadDeletionMode | null;
    /**
     * 
     * @type {CommenterNameFormats}
     * @memberof CustomConfigParameters
     */
    commenterNameFormat?: CommenterNameFormats | null;
    /**
     * 
     * @type {number}
     * @memberof CustomConfigParameters
     */
    countAboveToggle?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomConfigParameters
     */
    customCSS?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CustomConfigParameters
     */
    defaultAvatarSrc?: string | null;
    /**
     * 
     * @type {SortDirections}
     * @memberof CustomConfigParameters
     */
    defaultSortDirection?: SortDirections | null;
    /**
     * 
     * @type {string}
     * @memberof CustomConfigParameters
     */
    defaultUsername?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableAutoAdminMigration?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableAutoHashTagCreation?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableBlocking?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableCommenterCommentDelete?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableCommenterCommentEdit?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableEmailInputs?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableLiveCommenting?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableNotificationBell?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableProfiles?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableSuccessMessage?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableToolbar?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableUnverifiedLabel?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    disableVoting?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    enableCommenterLinks?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    enableSearch?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    enableSpoilers?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    enableThirdPartyCookieBypass?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    enableViewCounts?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    enableVoteList?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    enableWYSIWYG?: boolean;
    /**
     * 
     * @type {GifRating}
     * @memberof CustomConfigParameters
     */
    gifRating?: GifRating;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    hasDarkBackground?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomConfigParameters
     */
    headerHTML?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    hideAvatars?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomConfigParameters
     */
    hideCommentsUnderCountTextFormat?: string | null;
    /**
     * 
     * @type {ImageContentProfanityLevel}
     * @memberof CustomConfigParameters
     */
    imageContentProfanityLevel?: ImageContentProfanityLevel;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    inputAfterComments?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    limitCommentsByGroups?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomConfigParameters
     */
    locale?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CustomConfigParameters
     */
    maxCommentCharacterLength?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CustomConfigParameters
     */
    maxCommentCreatedCountPUPM?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    noCustomConfig?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    noImageUploads?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    noStyles?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CustomConfigParameters
     */
    pageSize?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    readonly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    requireSSO?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    enableResizeHandle?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomConfigParameters
     */
    restrictedLinkDomains?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    showBadgesInTopBar?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    showCommentSaveSuccess?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    showLiveRightAway?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    showQuestion?: boolean;
    /**
     * 
     * @type {Array<SpamRule>}
     * @memberof CustomConfigParameters
     */
    spamRules?: Array<SpamRule>;
    /**
     * 
     * @type {SSOSecurityLevel}
     * @memberof CustomConfigParameters
     */
    ssoSecLvl?: SSOSecurityLevel;
    /**
     * Construct a type with a set of properties K of type T
     * @type {{ [key: string]: string; }}
     * @memberof CustomConfigParameters
     */
    translations?: { [key: string]: string; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    useShowCommentsToggle?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    useSingleLineCommentInput?: boolean;
    /**
     * 
     * @type {VoteStyle}
     * @memberof CustomConfigParameters
     */
    voteStyle?: VoteStyle;
    /**
     * 
     * @type {string}
     * @memberof CustomConfigParameters
     */
    widgetQuestionId?: string;
    /**
     * 
     * @type {CommentQuestionResultsRenderingType}
     * @memberof CustomConfigParameters
     */
    widgetQuestionResultsStyle?: CommentQuestionResultsRenderingType;
    /**
     * 
     * @type {QuestionRenderingType}
     * @memberof CustomConfigParameters
     */
    widgetQuestionStyle?: QuestionRenderingType;
    /**
     * 
     * @type {QuestionWhenSave}
     * @memberof CustomConfigParameters
     */
    widgetQuestionWhenToSave?: QuestionWhenSave;
    /**
     * 
     * @type {CommentQuestionsRequired}
     * @memberof CustomConfigParameters
     */
    widgetQuestionsRequired?: CommentQuestionsRequired;
    /**
     * 
     * @type {QuestionSubQuestionVisibility}
     * @memberof CustomConfigParameters
     */
    widgetSubQuestionVisibility?: QuestionSubQuestionVisibility;
    /**
     * 
     * @type {boolean}
     * @memberof CustomConfigParameters
     */
    wrap?: boolean;
}



/**
 * Check if a given object implements the CustomConfigParameters interface.
 */
export function instanceOfCustomConfigParameters(value: object): value is CustomConfigParameters {
    return true;
}

export function CustomConfigParametersFromJSON(json: any): CustomConfigParameters {
    return CustomConfigParametersFromJSONTyped(json, false);
}

export function CustomConfigParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomConfigParameters {
    if (json == null) {
        return json;
    }
    return {
        
        'absoluteAndRelativeDates': json['absoluteAndRelativeDates'] == null ? undefined : json['absoluteAndRelativeDates'],
        'absoluteDates': json['absoluteDates'] == null ? undefined : json['absoluteDates'],
        'allowAnon': json['allowAnon'] == null ? undefined : json['allowAnon'],
        'allowAnonFlag': json['allowAnonFlag'] == null ? undefined : json['allowAnonFlag'],
        'allowAnonVotes': json['allowAnonVotes'] == null ? undefined : json['allowAnonVotes'],
        'allowedLanguages': json['allowedLanguages'] == null ? undefined : json['allowedLanguages'],
        'collapseReplies': json['collapseReplies'] == null ? undefined : json['collapseReplies'],
        'commentCountFormat': json['commentCountFormat'] == null ? undefined : json['commentCountFormat'],
        'commentHTMLRenderingMode': json['commentHTMLRenderingMode'] == null ? undefined : CommentHTMLRenderingModeFromJSON(json['commentHTMLRenderingMode']),
        'commentThreadDeleteMode': json['commentThreadDeleteMode'] == null ? undefined : CommentThreadDeletionModeFromJSON(json['commentThreadDeleteMode']),
        'commenterNameFormat': json['commenterNameFormat'] == null ? undefined : CommenterNameFormatsFromJSON(json['commenterNameFormat']),
        'countAboveToggle': json['countAboveToggle'] == null ? undefined : json['countAboveToggle'],
        'customCSS': json['customCSS'] == null ? undefined : json['customCSS'],
        'defaultAvatarSrc': json['defaultAvatarSrc'] == null ? undefined : json['defaultAvatarSrc'],
        'defaultSortDirection': json['defaultSortDirection'] == null ? undefined : SortDirectionsFromJSON(json['defaultSortDirection']),
        'defaultUsername': json['defaultUsername'] == null ? undefined : json['defaultUsername'],
        'disableAutoAdminMigration': json['disableAutoAdminMigration'] == null ? undefined : json['disableAutoAdminMigration'],
        'disableAutoHashTagCreation': json['disableAutoHashTagCreation'] == null ? undefined : json['disableAutoHashTagCreation'],
        'disableBlocking': json['disableBlocking'] == null ? undefined : json['disableBlocking'],
        'disableCommenterCommentDelete': json['disableCommenterCommentDelete'] == null ? undefined : json['disableCommenterCommentDelete'],
        'disableCommenterCommentEdit': json['disableCommenterCommentEdit'] == null ? undefined : json['disableCommenterCommentEdit'],
        'disableEmailInputs': json['disableEmailInputs'] == null ? undefined : json['disableEmailInputs'],
        'disableLiveCommenting': json['disableLiveCommenting'] == null ? undefined : json['disableLiveCommenting'],
        'disableNotificationBell': json['disableNotificationBell'] == null ? undefined : json['disableNotificationBell'],
        'disableProfiles': json['disableProfiles'] == null ? undefined : json['disableProfiles'],
        'disableSuccessMessage': json['disableSuccessMessage'] == null ? undefined : json['disableSuccessMessage'],
        'disableToolbar': json['disableToolbar'] == null ? undefined : json['disableToolbar'],
        'disableUnverifiedLabel': json['disableUnverifiedLabel'] == null ? undefined : json['disableUnverifiedLabel'],
        'disableVoting': json['disableVoting'] == null ? undefined : json['disableVoting'],
        'enableCommenterLinks': json['enableCommenterLinks'] == null ? undefined : json['enableCommenterLinks'],
        'enableSearch': json['enableSearch'] == null ? undefined : json['enableSearch'],
        'enableSpoilers': json['enableSpoilers'] == null ? undefined : json['enableSpoilers'],
        'enableThirdPartyCookieBypass': json['enableThirdPartyCookieBypass'] == null ? undefined : json['enableThirdPartyCookieBypass'],
        'enableViewCounts': json['enableViewCounts'] == null ? undefined : json['enableViewCounts'],
        'enableVoteList': json['enableVoteList'] == null ? undefined : json['enableVoteList'],
        'enableWYSIWYG': json['enableWYSIWYG'] == null ? undefined : json['enableWYSIWYG'],
        'gifRating': json['gifRating'] == null ? undefined : GifRatingFromJSON(json['gifRating']),
        'hasDarkBackground': json['hasDarkBackground'] == null ? undefined : json['hasDarkBackground'],
        'headerHTML': json['headerHTML'] == null ? undefined : json['headerHTML'],
        'hideAvatars': json['hideAvatars'] == null ? undefined : json['hideAvatars'],
        'hideCommentsUnderCountTextFormat': json['hideCommentsUnderCountTextFormat'] == null ? undefined : json['hideCommentsUnderCountTextFormat'],
        'imageContentProfanityLevel': json['imageContentProfanityLevel'] == null ? undefined : ImageContentProfanityLevelFromJSON(json['imageContentProfanityLevel']),
        'inputAfterComments': json['inputAfterComments'] == null ? undefined : json['inputAfterComments'],
        'limitCommentsByGroups': json['limitCommentsByGroups'] == null ? undefined : json['limitCommentsByGroups'],
        'locale': json['locale'] == null ? undefined : json['locale'],
        'maxCommentCharacterLength': json['maxCommentCharacterLength'] == null ? undefined : json['maxCommentCharacterLength'],
        'maxCommentCreatedCountPUPM': json['maxCommentCreatedCountPUPM'] == null ? undefined : json['maxCommentCreatedCountPUPM'],
        'noCustomConfig': json['noCustomConfig'] == null ? undefined : json['noCustomConfig'],
        'noImageUploads': json['noImageUploads'] == null ? undefined : json['noImageUploads'],
        'noStyles': json['noStyles'] == null ? undefined : json['noStyles'],
        'pageSize': json['pageSize'] == null ? undefined : json['pageSize'],
        'readonly': json['readonly'] == null ? undefined : json['readonly'],
        'requireSSO': json['requireSSO'] == null ? undefined : json['requireSSO'],
        'enableResizeHandle': json['enableResizeHandle'] == null ? undefined : json['enableResizeHandle'],
        'restrictedLinkDomains': json['restrictedLinkDomains'] == null ? undefined : json['restrictedLinkDomains'],
        'showBadgesInTopBar': json['showBadgesInTopBar'] == null ? undefined : json['showBadgesInTopBar'],
        'showCommentSaveSuccess': json['showCommentSaveSuccess'] == null ? undefined : json['showCommentSaveSuccess'],
        'showLiveRightAway': json['showLiveRightAway'] == null ? undefined : json['showLiveRightAway'],
        'showQuestion': json['showQuestion'] == null ? undefined : json['showQuestion'],
        'spamRules': json['spamRules'] == null ? undefined : ((json['spamRules'] as Array<any>).map(SpamRuleFromJSON)),
        'ssoSecLvl': json['ssoSecLvl'] == null ? undefined : SSOSecurityLevelFromJSON(json['ssoSecLvl']),
        'translations': json['translations'] == null ? undefined : json['translations'],
        'useShowCommentsToggle': json['useShowCommentsToggle'] == null ? undefined : json['useShowCommentsToggle'],
        'useSingleLineCommentInput': json['useSingleLineCommentInput'] == null ? undefined : json['useSingleLineCommentInput'],
        'voteStyle': json['voteStyle'] == null ? undefined : VoteStyleFromJSON(json['voteStyle']),
        'widgetQuestionId': json['widgetQuestionId'] == null ? undefined : json['widgetQuestionId'],
        'widgetQuestionResultsStyle': json['widgetQuestionResultsStyle'] == null ? undefined : CommentQuestionResultsRenderingTypeFromJSON(json['widgetQuestionResultsStyle']),
        'widgetQuestionStyle': json['widgetQuestionStyle'] == null ? undefined : QuestionRenderingTypeFromJSON(json['widgetQuestionStyle']),
        'widgetQuestionWhenToSave': json['widgetQuestionWhenToSave'] == null ? undefined : QuestionWhenSaveFromJSON(json['widgetQuestionWhenToSave']),
        'widgetQuestionsRequired': json['widgetQuestionsRequired'] == null ? undefined : CommentQuestionsRequiredFromJSON(json['widgetQuestionsRequired']),
        'widgetSubQuestionVisibility': json['widgetSubQuestionVisibility'] == null ? undefined : QuestionSubQuestionVisibilityFromJSON(json['widgetSubQuestionVisibility']),
        'wrap': json['wrap'] == null ? undefined : json['wrap'],
    };
}

export function CustomConfigParametersToJSON(json: any): CustomConfigParameters {
    return CustomConfigParametersToJSONTyped(json, false);
}

export function CustomConfigParametersToJSONTyped(value?: CustomConfigParameters | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'absoluteAndRelativeDates': value['absoluteAndRelativeDates'],
        'absoluteDates': value['absoluteDates'],
        'allowAnon': value['allowAnon'],
        'allowAnonFlag': value['allowAnonFlag'],
        'allowAnonVotes': value['allowAnonVotes'],
        'allowedLanguages': value['allowedLanguages'],
        'collapseReplies': value['collapseReplies'],
        'commentCountFormat': value['commentCountFormat'],
        'commentHTMLRenderingMode': CommentHTMLRenderingModeToJSON(value['commentHTMLRenderingMode']),
        'commentThreadDeleteMode': CommentThreadDeletionModeToJSON(value['commentThreadDeleteMode']),
        'commenterNameFormat': CommenterNameFormatsToJSON(value['commenterNameFormat']),
        'countAboveToggle': value['countAboveToggle'],
        'customCSS': value['customCSS'],
        'defaultAvatarSrc': value['defaultAvatarSrc'],
        'defaultSortDirection': SortDirectionsToJSON(value['defaultSortDirection']),
        'defaultUsername': value['defaultUsername'],
        'disableAutoAdminMigration': value['disableAutoAdminMigration'],
        'disableAutoHashTagCreation': value['disableAutoHashTagCreation'],
        'disableBlocking': value['disableBlocking'],
        'disableCommenterCommentDelete': value['disableCommenterCommentDelete'],
        'disableCommenterCommentEdit': value['disableCommenterCommentEdit'],
        'disableEmailInputs': value['disableEmailInputs'],
        'disableLiveCommenting': value['disableLiveCommenting'],
        'disableNotificationBell': value['disableNotificationBell'],
        'disableProfiles': value['disableProfiles'],
        'disableSuccessMessage': value['disableSuccessMessage'],
        'disableToolbar': value['disableToolbar'],
        'disableUnverifiedLabel': value['disableUnverifiedLabel'],
        'disableVoting': value['disableVoting'],
        'enableCommenterLinks': value['enableCommenterLinks'],
        'enableSearch': value['enableSearch'],
        'enableSpoilers': value['enableSpoilers'],
        'enableThirdPartyCookieBypass': value['enableThirdPartyCookieBypass'],
        'enableViewCounts': value['enableViewCounts'],
        'enableVoteList': value['enableVoteList'],
        'enableWYSIWYG': value['enableWYSIWYG'],
        'gifRating': GifRatingToJSON(value['gifRating']),
        'hasDarkBackground': value['hasDarkBackground'],
        'headerHTML': value['headerHTML'],
        'hideAvatars': value['hideAvatars'],
        'hideCommentsUnderCountTextFormat': value['hideCommentsUnderCountTextFormat'],
        'imageContentProfanityLevel': ImageContentProfanityLevelToJSON(value['imageContentProfanityLevel']),
        'inputAfterComments': value['inputAfterComments'],
        'limitCommentsByGroups': value['limitCommentsByGroups'],
        'locale': value['locale'],
        'maxCommentCharacterLength': value['maxCommentCharacterLength'],
        'maxCommentCreatedCountPUPM': value['maxCommentCreatedCountPUPM'],
        'noCustomConfig': value['noCustomConfig'],
        'noImageUploads': value['noImageUploads'],
        'noStyles': value['noStyles'],
        'pageSize': value['pageSize'],
        'readonly': value['readonly'],
        'requireSSO': value['requireSSO'],
        'enableResizeHandle': value['enableResizeHandle'],
        'restrictedLinkDomains': value['restrictedLinkDomains'],
        'showBadgesInTopBar': value['showBadgesInTopBar'],
        'showCommentSaveSuccess': value['showCommentSaveSuccess'],
        'showLiveRightAway': value['showLiveRightAway'],
        'showQuestion': value['showQuestion'],
        'spamRules': value['spamRules'] == null ? undefined : ((value['spamRules'] as Array<any>).map(SpamRuleToJSON)),
        'ssoSecLvl': SSOSecurityLevelToJSON(value['ssoSecLvl']),
        'translations': value['translations'],
        'useShowCommentsToggle': value['useShowCommentsToggle'],
        'useSingleLineCommentInput': value['useSingleLineCommentInput'],
        'voteStyle': VoteStyleToJSON(value['voteStyle']),
        'widgetQuestionId': value['widgetQuestionId'],
        'widgetQuestionResultsStyle': CommentQuestionResultsRenderingTypeToJSON(value['widgetQuestionResultsStyle']),
        'widgetQuestionStyle': QuestionRenderingTypeToJSON(value['widgetQuestionStyle']),
        'widgetQuestionWhenToSave': QuestionWhenSaveToJSON(value['widgetQuestionWhenToSave']),
        'widgetQuestionsRequired': CommentQuestionsRequiredToJSON(value['widgetQuestionsRequired']),
        'widgetSubQuestionVisibility': QuestionSubQuestionVisibilityToJSON(value['widgetSubQuestionVisibility']),
        'wrap': value['wrap'],
    };
}

