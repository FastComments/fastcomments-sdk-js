/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserBadgeProgress
 */
export interface UserBadgeProgress {
    /**
     * 
     * @type {string}
     * @memberof UserBadgeProgress
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserBadgeProgress
     */
    tenantId: string;
    /**
     * 
     * @type {string}
     * @memberof UserBadgeProgress
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof UserBadgeProgress
     */
    firstCommentId: string;
    /**
     * 
     * @type {Date}
     * @memberof UserBadgeProgress
     */
    firstCommentDate: Date;
    /**
     * 
     * @type {number}
     * @memberof UserBadgeProgress
     */
    autoTrustFactor?: number;
    /**
     * 
     * @type {number}
     * @memberof UserBadgeProgress
     */
    manualTrustFactor?: number;
    /**
     * Construct a type with a set of properties K of type T
     * @type {{ [key: string]: number; }}
     * @memberof UserBadgeProgress
     */
    progress: { [key: string]: number; };
}

/**
 * Check if a given object implements the UserBadgeProgress interface.
 */
export function instanceOfUserBadgeProgress(value: object): value is UserBadgeProgress {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tenantId' in value) || value['tenantId'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('firstCommentId' in value) || value['firstCommentId'] === undefined) return false;
    if (!('firstCommentDate' in value) || value['firstCommentDate'] === undefined) return false;
    if (!('progress' in value) || value['progress'] === undefined) return false;
    return true;
}

export function UserBadgeProgressFromJSON(json: any): UserBadgeProgress {
    return UserBadgeProgressFromJSONTyped(json, false);
}

export function UserBadgeProgressFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserBadgeProgress {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'tenantId': json['tenantId'],
        'userId': json['userId'],
        'firstCommentId': json['firstCommentId'],
        'firstCommentDate': (new Date(json['firstCommentDate'])),
        'autoTrustFactor': json['autoTrustFactor'] == null ? undefined : json['autoTrustFactor'],
        'manualTrustFactor': json['manualTrustFactor'] == null ? undefined : json['manualTrustFactor'],
        'progress': json['progress'],
    };
}

export function UserBadgeProgressToJSON(json: any): UserBadgeProgress {
    return UserBadgeProgressToJSONTyped(json, false);
}

export function UserBadgeProgressToJSONTyped(value?: UserBadgeProgress | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '_id': value['id'],
        'tenantId': value['tenantId'],
        'userId': value['userId'],
        'firstCommentId': value['firstCommentId'],
        'firstCommentDate': ((value['firstCommentDate']).toISOString()),
        'autoTrustFactor': value['autoTrustFactor'],
        'manualTrustFactor': value['manualTrustFactor'],
        'progress': value['progress'],
    };
}

