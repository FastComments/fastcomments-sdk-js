/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QuestionDatum } from './QuestionDatum';
import {
    QuestionDatumFromJSON,
    QuestionDatumFromJSONTyped,
    QuestionDatumToJSON,
    QuestionDatumToJSONTyped,
} from './QuestionDatum';

/**
 * 
 * @export
 * @interface QuestionResultAggregationOverall
 */
export interface QuestionResultAggregationOverall {
    /**
     * Construct a type with a set of properties K of type T
     * @type {{ [key: string]: QuestionDatum; }}
     * @memberof QuestionResultAggregationOverall
     */
    dataByDateBucket?: { [key: string]: QuestionDatum; };
    /**
     * Construct a type with a set of properties K of type T
     * @type {{ [key: string]: QuestionDatum; }}
     * @memberof QuestionResultAggregationOverall
     */
    dataByUrlId?: { [key: string]: QuestionDatum; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof QuestionResultAggregationOverall
     */
    countsByValue?: { [key: string]: number; };
    /**
     * 
     * @type {number}
     * @memberof QuestionResultAggregationOverall
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof QuestionResultAggregationOverall
     */
    average?: number;
    /**
     * 
     * @type {Date}
     * @memberof QuestionResultAggregationOverall
     */
    createdAt: Date;
}

/**
 * Check if a given object implements the QuestionResultAggregationOverall interface.
 */
export function instanceOfQuestionResultAggregationOverall(value: object): value is QuestionResultAggregationOverall {
    if (!('total' in value) || value['total'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function QuestionResultAggregationOverallFromJSON(json: any): QuestionResultAggregationOverall {
    return QuestionResultAggregationOverallFromJSONTyped(json, false);
}

export function QuestionResultAggregationOverallFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionResultAggregationOverall {
    if (json == null) {
        return json;
    }
    return {
        
        'dataByDateBucket': json['dataByDateBucket'] == null ? undefined : (mapValues(json['dataByDateBucket'], QuestionDatumFromJSON)),
        'dataByUrlId': json['dataByUrlId'] == null ? undefined : (mapValues(json['dataByUrlId'], QuestionDatumFromJSON)),
        'countsByValue': json['countsByValue'] == null ? undefined : json['countsByValue'],
        'total': json['total'],
        'average': json['average'] == null ? undefined : json['average'],
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function QuestionResultAggregationOverallToJSON(json: any): QuestionResultAggregationOverall {
    return QuestionResultAggregationOverallToJSONTyped(json, false);
}

export function QuestionResultAggregationOverallToJSONTyped(value?: QuestionResultAggregationOverall | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'dataByDateBucket': value['dataByDateBucket'] == null ? undefined : (mapValues(value['dataByDateBucket'], QuestionDatumToJSON)),
        'dataByUrlId': value['dataByUrlId'] == null ? undefined : (mapValues(value['dataByUrlId'], QuestionDatumToJSON)),
        'countsByValue': value['countsByValue'],
        'total': value['total'],
        'average': value['average'],
        'createdAt': ((value['createdAt']).toISOString()),
    };
}

