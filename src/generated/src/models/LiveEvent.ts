/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LiveEventType } from './LiveEventType';
import {
    LiveEventTypeFromJSON,
    LiveEventTypeFromJSONTyped,
    LiveEventTypeToJSON,
    LiveEventTypeToJSONTyped,
} from './LiveEventType';
import type { FeedPost } from './FeedPost';
import {
    FeedPostFromJSON,
    FeedPostFromJSONTyped,
    FeedPostToJSON,
    FeedPostToJSONTyped,
} from './FeedPost';
import type { UserNotification } from './UserNotification';
import {
    UserNotificationFromJSON,
    UserNotificationFromJSONTyped,
    UserNotificationToJSON,
    UserNotificationToJSONTyped,
} from './UserNotification';
import type { PubSubVote } from './PubSubVote';
import {
    PubSubVoteFromJSON,
    PubSubVoteFromJSONTyped,
    PubSubVoteToJSON,
    PubSubVoteToJSONTyped,
} from './PubSubVote';
import type { LiveEventExtraInfo } from './LiveEventExtraInfo';
import {
    LiveEventExtraInfoFromJSON,
    LiveEventExtraInfoFromJSONTyped,
    LiveEventExtraInfoToJSON,
    LiveEventExtraInfoToJSONTyped,
} from './LiveEventExtraInfo';
import type { PubSubComment } from './PubSubComment';
import {
    PubSubCommentFromJSON,
    PubSubCommentFromJSONTyped,
    PubSubCommentToJSON,
    PubSubCommentToJSONTyped,
} from './PubSubComment';
import type { CommentUserBadgeInfo } from './CommentUserBadgeInfo';
import {
    CommentUserBadgeInfoFromJSON,
    CommentUserBadgeInfoFromJSONTyped,
    CommentUserBadgeInfoToJSON,
    CommentUserBadgeInfoToJSONTyped,
} from './CommentUserBadgeInfo';

/**
 * 
 * @export
 * @interface LiveEvent
 */
export interface LiveEvent {
    /**
     * 
     * @type {LiveEventType}
     * @memberof LiveEvent
     */
    type: LiveEventType;
    /**
     * 
     * @type {number}
     * @memberof LiveEvent
     */
    timestamp?: number;
    /**
     * 
     * @type {number}
     * @memberof LiveEvent
     */
    ts?: number;
    /**
     * 
     * @type {string}
     * @memberof LiveEvent
     */
    broadcastId?: string;
    /**
     * 
     * @type {string}
     * @memberof LiveEvent
     */
    userId?: string;
    /**
     * 
     * @type {Array<CommentUserBadgeInfo>}
     * @memberof LiveEvent
     */
    badges?: Array<CommentUserBadgeInfo>;
    /**
     * 
     * @type {UserNotification}
     * @memberof LiveEvent
     */
    notification?: UserNotification;
    /**
     * 
     * @type {PubSubVote}
     * @memberof LiveEvent
     */
    vote?: PubSubVote;
    /**
     * 
     * @type {PubSubComment}
     * @memberof LiveEvent
     */
    comment?: PubSubComment;
    /**
     * 
     * @type {FeedPost}
     * @memberof LiveEvent
     */
    feedPost?: FeedPost;
    /**
     * 
     * @type {LiveEventExtraInfo}
     * @memberof LiveEvent
     */
    extraInfo?: LiveEventExtraInfo;
    /**
     * 
     * @type {object}
     * @memberof LiveEvent
     */
    config?: object;
    /**
     * 
     * @type {boolean}
     * @memberof LiveEvent
     */
    isClosed?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof LiveEvent
     */
    uj?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof LiveEvent
     */
    ul?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof LiveEvent
     */
    changes?: { [key: string]: number; };
}



/**
 * Check if a given object implements the LiveEvent interface.
 */
export function instanceOfLiveEvent(value: object): value is LiveEvent {
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function LiveEventFromJSON(json: any): LiveEvent {
    return LiveEventFromJSONTyped(json, false);
}

export function LiveEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): LiveEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'type': LiveEventTypeFromJSON(json['type']),
        'timestamp': json['timestamp'] == null ? undefined : json['timestamp'],
        'ts': json['ts'] == null ? undefined : json['ts'],
        'broadcastId': json['broadcastId'] == null ? undefined : json['broadcastId'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'badges': json['badges'] == null ? undefined : ((json['badges'] as Array<any>).map(CommentUserBadgeInfoFromJSON)),
        'notification': json['notification'] == null ? undefined : UserNotificationFromJSON(json['notification']),
        'vote': json['vote'] == null ? undefined : PubSubVoteFromJSON(json['vote']),
        'comment': json['comment'] == null ? undefined : PubSubCommentFromJSON(json['comment']),
        'feedPost': json['feedPost'] == null ? undefined : FeedPostFromJSON(json['feedPost']),
        'extraInfo': json['extraInfo'] == null ? undefined : LiveEventExtraInfoFromJSON(json['extraInfo']),
        'config': json['config'] == null ? undefined : json['config'],
        'isClosed': json['isClosed'] == null ? undefined : json['isClosed'],
        'uj': json['uj'] == null ? undefined : json['uj'],
        'ul': json['ul'] == null ? undefined : json['ul'],
        'changes': json['changes'] == null ? undefined : json['changes'],
    };
}

export function LiveEventToJSON(json: any): LiveEvent {
    return LiveEventToJSONTyped(json, false);
}

export function LiveEventToJSONTyped(value?: LiveEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': LiveEventTypeToJSON(value['type']),
        'timestamp': value['timestamp'],
        'ts': value['ts'],
        'broadcastId': value['broadcastId'],
        'userId': value['userId'],
        'badges': value['badges'] == null ? undefined : ((value['badges'] as Array<any>).map(CommentUserBadgeInfoToJSON)),
        'notification': UserNotificationToJSON(value['notification']),
        'vote': PubSubVoteToJSON(value['vote']),
        'comment': PubSubCommentToJSON(value['comment']),
        'feedPost': FeedPostToJSON(value['feedPost']),
        'extraInfo': LiveEventExtraInfoToJSON(value['extraInfo']),
        'config': value['config'],
        'isClosed': value['isClosed'],
        'uj': value['uj'],
        'ul': value['ul'],
        'changes': value['changes'],
    };
}

