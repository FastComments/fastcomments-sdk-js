/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { APIGetUserBadgeProgressResponse } from './APIGetUserBadgeProgressResponse';
import {
    APIGetUserBadgeProgressResponseFromJSON,
    APIGetUserBadgeProgressResponseFromJSONTyped,
    APIGetUserBadgeProgressResponseToJSON,
    APIGetUserBadgeProgressResponseToJSONTyped,
} from './APIGetUserBadgeProgressResponse';
import type { CustomConfigParameters } from './CustomConfigParameters';
import {
    CustomConfigParametersFromJSON,
    CustomConfigParametersFromJSONTyped,
    CustomConfigParametersToJSON,
    CustomConfigParametersToJSONTyped,
} from './CustomConfigParameters';
import type { ImportedAPIStatusFAILED } from './ImportedAPIStatusFAILED';
import {
    ImportedAPIStatusFAILEDFromJSON,
    ImportedAPIStatusFAILEDFromJSONTyped,
    ImportedAPIStatusFAILEDToJSON,
    ImportedAPIStatusFAILEDToJSONTyped,
} from './ImportedAPIStatusFAILED';
import type { APIError } from './APIError';
import {
    APIErrorFromJSON,
    APIErrorFromJSONTyped,
    APIErrorToJSON,
    APIErrorToJSONTyped,
} from './APIError';
import type { UserBadgeProgress } from './UserBadgeProgress';
import {
    UserBadgeProgressFromJSON,
    UserBadgeProgressFromJSONTyped,
    UserBadgeProgressToJSON,
    UserBadgeProgressToJSONTyped,
} from './UserBadgeProgress';

/**
 * 
 * @export
 * @interface GetUserBadgeProgressById200Response
 */
export interface GetUserBadgeProgressById200Response {
    /**
     * 
     * @type {ImportedAPIStatusFAILED}
     * @memberof GetUserBadgeProgressById200Response
     */
    status: ImportedAPIStatusFAILED;
    /**
     * 
     * @type {UserBadgeProgress}
     * @memberof GetUserBadgeProgressById200Response
     */
    userBadgeProgress: UserBadgeProgress;
    /**
     * 
     * @type {string}
     * @memberof GetUserBadgeProgressById200Response
     */
    reason: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserBadgeProgressById200Response
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserBadgeProgressById200Response
     */
    secondaryCode?: string;
    /**
     * 
     * @type {number}
     * @memberof GetUserBadgeProgressById200Response
     */
    bannedUntil?: number;
    /**
     * 
     * @type {number}
     * @memberof GetUserBadgeProgressById200Response
     */
    maxCharacterLength?: number;
    /**
     * 
     * @type {string}
     * @memberof GetUserBadgeProgressById200Response
     */
    translatedError?: string;
    /**
     * 
     * @type {CustomConfigParameters}
     * @memberof GetUserBadgeProgressById200Response
     */
    customConfig?: CustomConfigParameters;
}



/**
 * Check if a given object implements the GetUserBadgeProgressById200Response interface.
 */
export function instanceOfGetUserBadgeProgressById200Response(value: object): value is GetUserBadgeProgressById200Response {
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('userBadgeProgress' in value) || value['userBadgeProgress'] === undefined) return false;
    if (!('reason' in value) || value['reason'] === undefined) return false;
    if (!('code' in value) || value['code'] === undefined) return false;
    return true;
}

export function GetUserBadgeProgressById200ResponseFromJSON(json: any): GetUserBadgeProgressById200Response {
    return GetUserBadgeProgressById200ResponseFromJSONTyped(json, false);
}

export function GetUserBadgeProgressById200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetUserBadgeProgressById200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'status': ImportedAPIStatusFAILEDFromJSON(json['status']),
        'userBadgeProgress': UserBadgeProgressFromJSON(json['userBadgeProgress']),
        'reason': json['reason'],
        'code': json['code'],
        'secondaryCode': json['secondaryCode'] == null ? undefined : json['secondaryCode'],
        'bannedUntil': json['bannedUntil'] == null ? undefined : json['bannedUntil'],
        'maxCharacterLength': json['maxCharacterLength'] == null ? undefined : json['maxCharacterLength'],
        'translatedError': json['translatedError'] == null ? undefined : json['translatedError'],
        'customConfig': json['customConfig'] == null ? undefined : CustomConfigParametersFromJSON(json['customConfig']),
    };
}

export function GetUserBadgeProgressById200ResponseToJSON(json: any): GetUserBadgeProgressById200Response {
    return GetUserBadgeProgressById200ResponseToJSONTyped(json, false);
}

export function GetUserBadgeProgressById200ResponseToJSONTyped(value?: GetUserBadgeProgressById200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': ImportedAPIStatusFAILEDToJSON(value['status']),
        'userBadgeProgress': UserBadgeProgressToJSON(value['userBadgeProgress']),
        'reason': value['reason'],
        'code': value['code'],
        'secondaryCode': value['secondaryCode'],
        'bannedUntil': value['bannedUntil'],
        'maxCharacterLength': value['maxCharacterLength'],
        'translatedError': value['translatedError'],
        'customConfig': CustomConfigParametersToJSON(value['customConfig']),
    };
}

