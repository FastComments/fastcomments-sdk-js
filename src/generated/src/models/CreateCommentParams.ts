/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CommentUserHashTagInfo } from './CommentUserHashTagInfo';
import {
    CommentUserHashTagInfoFromJSON,
    CommentUserHashTagInfoFromJSONTyped,
    CommentUserHashTagInfoToJSON,
    CommentUserHashTagInfoToJSONTyped,
} from './CommentUserHashTagInfo';
import type { CommentUserMentionInfo } from './CommentUserMentionInfo';
import {
    CommentUserMentionInfoFromJSON,
    CommentUserMentionInfoFromJSONTyped,
    CommentUserMentionInfoToJSON,
    CommentUserMentionInfoToJSONTyped,
} from './CommentUserMentionInfo';
import type { RecordStringStringOrNumberValue } from './RecordStringStringOrNumberValue';
import {
    RecordStringStringOrNumberValueFromJSON,
    RecordStringStringOrNumberValueFromJSONTyped,
    RecordStringStringOrNumberValueToJSON,
    RecordStringStringOrNumberValueToJSONTyped,
} from './RecordStringStringOrNumberValue';

/**
 * 
 * @export
 * @interface CreateCommentParams
 */
export interface CreateCommentParams {
    /**
     * 
     * @type {number}
     * @memberof CreateCommentParams
     */
    date?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    localDateString?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCommentParams
     */
    localDateHours?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    commenterName: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    commenterEmail?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    commenterLink?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    comment: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCommentParams
     */
    productId?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    userId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    avatarSrc?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    parentId?: string | null;
    /**
     * 
     * @type {Array<CommentUserMentionInfo>}
     * @memberof CreateCommentParams
     */
    mentions?: Array<CommentUserMentionInfo>;
    /**
     * 
     * @type {Array<CommentUserHashTagInfo>}
     * @memberof CreateCommentParams
     */
    hashTags?: Array<CommentUserHashTagInfo>;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    pageTitle?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCommentParams
     */
    isFromMyAccountPage?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    urlId: string;
    /**
     * 
     * @type {object}
     * @memberof CreateCommentParams
     */
    meta?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateCommentParams
     */
    moderationGroupIds?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof CreateCommentParams
     */
    rating?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCommentParams
     */
    fromOfflineRestore?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateCommentParams
     */
    autoplayDelayMS?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateCommentParams
     */
    feedbackIds?: Array<string>;
    /**
     * Construct a type with a set of properties K of type T
     * @type {{ [key: string]: RecordStringStringOrNumberValue; }}
     * @memberof CreateCommentParams
     */
    questionValues?: { [key: string]: RecordStringStringOrNumberValue; };
    /**
     * 
     * @type {boolean}
     * @memberof CreateCommentParams
     */
    approved?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    domain?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentParams
     */
    ip?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCommentParams
     */
    isPinned?: boolean;
    /**
     * Example: en_us
     * @type {string}
     * @memberof CreateCommentParams
     */
    locale: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCommentParams
     */
    reviewed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCommentParams
     */
    verified?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CreateCommentParams
     */
    votes?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateCommentParams
     */
    votesDown?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateCommentParams
     */
    votesUp?: number;
}

/**
 * Check if a given object implements the CreateCommentParams interface.
 */
export function instanceOfCreateCommentParams(value: object): value is CreateCommentParams {
    if (!('commenterName' in value) || value['commenterName'] === undefined) return false;
    if (!('comment' in value) || value['comment'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('urlId' in value) || value['urlId'] === undefined) return false;
    if (!('locale' in value) || value['locale'] === undefined) return false;
    return true;
}

export function CreateCommentParamsFromJSON(json: any): CreateCommentParams {
    return CreateCommentParamsFromJSONTyped(json, false);
}

export function CreateCommentParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCommentParams {
    if (json == null) {
        return json;
    }
    return {
        
        'date': json['date'] == null ? undefined : json['date'],
        'localDateString': json['localDateString'] == null ? undefined : json['localDateString'],
        'localDateHours': json['localDateHours'] == null ? undefined : json['localDateHours'],
        'commenterName': json['commenterName'],
        'commenterEmail': json['commenterEmail'] == null ? undefined : json['commenterEmail'],
        'commenterLink': json['commenterLink'] == null ? undefined : json['commenterLink'],
        'comment': json['comment'],
        'productId': json['productId'] == null ? undefined : json['productId'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'avatarSrc': json['avatarSrc'] == null ? undefined : json['avatarSrc'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'mentions': json['mentions'] == null ? undefined : ((json['mentions'] as Array<any>).map(CommentUserMentionInfoFromJSON)),
        'hashTags': json['hashTags'] == null ? undefined : ((json['hashTags'] as Array<any>).map(CommentUserHashTagInfoFromJSON)),
        'pageTitle': json['pageTitle'] == null ? undefined : json['pageTitle'],
        'isFromMyAccountPage': json['isFromMyAccountPage'] == null ? undefined : json['isFromMyAccountPage'],
        'url': json['url'],
        'urlId': json['urlId'],
        'meta': json['meta'] == null ? undefined : json['meta'],
        'moderationGroupIds': json['moderationGroupIds'] == null ? undefined : json['moderationGroupIds'],
        'rating': json['rating'] == null ? undefined : json['rating'],
        'fromOfflineRestore': json['fromOfflineRestore'] == null ? undefined : json['fromOfflineRestore'],
        'autoplayDelayMS': json['autoplayDelayMS'] == null ? undefined : json['autoplayDelayMS'],
        'feedbackIds': json['feedbackIds'] == null ? undefined : json['feedbackIds'],
        'questionValues': json['questionValues'] == null ? undefined : (mapValues(json['questionValues'], RecordStringStringOrNumberValueFromJSON)),
        'approved': json['approved'] == null ? undefined : json['approved'],
        'domain': json['domain'] == null ? undefined : json['domain'],
        'ip': json['ip'] == null ? undefined : json['ip'],
        'isPinned': json['isPinned'] == null ? undefined : json['isPinned'],
        'locale': json['locale'],
        'reviewed': json['reviewed'] == null ? undefined : json['reviewed'],
        'verified': json['verified'] == null ? undefined : json['verified'],
        'votes': json['votes'] == null ? undefined : json['votes'],
        'votesDown': json['votesDown'] == null ? undefined : json['votesDown'],
        'votesUp': json['votesUp'] == null ? undefined : json['votesUp'],
    };
}

export function CreateCommentParamsToJSON(json: any): CreateCommentParams {
    return CreateCommentParamsToJSONTyped(json, false);
}

export function CreateCommentParamsToJSONTyped(value?: CreateCommentParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'date': value['date'],
        'localDateString': value['localDateString'],
        'localDateHours': value['localDateHours'],
        'commenterName': value['commenterName'],
        'commenterEmail': value['commenterEmail'],
        'commenterLink': value['commenterLink'],
        'comment': value['comment'],
        'productId': value['productId'],
        'userId': value['userId'],
        'avatarSrc': value['avatarSrc'],
        'parentId': value['parentId'],
        'mentions': value['mentions'] == null ? undefined : ((value['mentions'] as Array<any>).map(CommentUserMentionInfoToJSON)),
        'hashTags': value['hashTags'] == null ? undefined : ((value['hashTags'] as Array<any>).map(CommentUserHashTagInfoToJSON)),
        'pageTitle': value['pageTitle'],
        'isFromMyAccountPage': value['isFromMyAccountPage'],
        'url': value['url'],
        'urlId': value['urlId'],
        'meta': value['meta'],
        'moderationGroupIds': value['moderationGroupIds'],
        'rating': value['rating'],
        'fromOfflineRestore': value['fromOfflineRestore'],
        'autoplayDelayMS': value['autoplayDelayMS'],
        'feedbackIds': value['feedbackIds'],
        'questionValues': value['questionValues'] == null ? undefined : (mapValues(value['questionValues'], RecordStringStringOrNumberValueToJSON)),
        'approved': value['approved'],
        'domain': value['domain'],
        'ip': value['ip'],
        'isPinned': value['isPinned'],
        'locale': value['locale'],
        'reviewed': value['reviewed'],
        'verified': value['verified'],
        'votes': value['votes'],
        'votesDown': value['votesDown'],
        'votesUp': value['votesUp'],
    };
}

