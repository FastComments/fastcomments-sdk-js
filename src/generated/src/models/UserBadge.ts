/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserBadge
 */
export interface UserBadge {
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    badgeId: string;
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    fromTenantId: string;
    /**
     * 
     * @type {Date}
     * @memberof UserBadge
     */
    createdAt: Date;
    /**
     * 
     * @type {number}
     * @memberof UserBadge
     */
    type: number;
    /**
     * 
     * @type {number}
     * @memberof UserBadge
     */
    threshold: number;
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    displayLabel: string;
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    displaySrc?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    backgroundColor?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    borderColor?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    textColor?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserBadge
     */
    cssClass?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserBadge
     */
    veteranUserThresholdMillis: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserBadge
     */
    displayedOnComments: boolean;
    /**
     * 
     * @type {Date}
     * @memberof UserBadge
     */
    receivedAt: Date;
    /**
     * 
     * @type {number}
     * @memberof UserBadge
     */
    order?: number;
}

/**
 * Check if a given object implements the UserBadge interface.
 */
export function instanceOfUserBadge(value: object): value is UserBadge {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('badgeId' in value) || value['badgeId'] === undefined) return false;
    if (!('fromTenantId' in value) || value['fromTenantId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('threshold' in value) || value['threshold'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('displayLabel' in value) || value['displayLabel'] === undefined) return false;
    if (!('veteranUserThresholdMillis' in value) || value['veteranUserThresholdMillis'] === undefined) return false;
    if (!('displayedOnComments' in value) || value['displayedOnComments'] === undefined) return false;
    if (!('receivedAt' in value) || value['receivedAt'] === undefined) return false;
    return true;
}

export function UserBadgeFromJSON(json: any): UserBadge {
    return UserBadgeFromJSONTyped(json, false);
}

export function UserBadgeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserBadge {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['_id'],
        'userId': json['userId'],
        'badgeId': json['badgeId'],
        'fromTenantId': json['fromTenantId'],
        'createdAt': (new Date(json['createdAt'])),
        'type': json['type'],
        'threshold': json['threshold'],
        'description': json['description'],
        'displayLabel': json['displayLabel'],
        'displaySrc': json['displaySrc'] == null ? undefined : json['displaySrc'],
        'backgroundColor': json['backgroundColor'] == null ? undefined : json['backgroundColor'],
        'borderColor': json['borderColor'] == null ? undefined : json['borderColor'],
        'textColor': json['textColor'] == null ? undefined : json['textColor'],
        'cssClass': json['cssClass'] == null ? undefined : json['cssClass'],
        'veteranUserThresholdMillis': json['veteranUserThresholdMillis'],
        'displayedOnComments': json['displayedOnComments'],
        'receivedAt': (new Date(json['receivedAt'])),
        'order': json['order'] == null ? undefined : json['order'],
    };
}

export function UserBadgeToJSON(json: any): UserBadge {
    return UserBadgeToJSONTyped(json, false);
}

export function UserBadgeToJSONTyped(value?: UserBadge | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '_id': value['id'],
        'userId': value['userId'],
        'badgeId': value['badgeId'],
        'fromTenantId': value['fromTenantId'],
        'createdAt': ((value['createdAt']).toISOString()),
        'type': value['type'],
        'threshold': value['threshold'],
        'description': value['description'],
        'displayLabel': value['displayLabel'],
        'displaySrc': value['displaySrc'],
        'backgroundColor': value['backgroundColor'],
        'borderColor': value['borderColor'],
        'textColor': value['textColor'],
        'cssClass': value['cssClass'],
        'veteranUserThresholdMillis': value['veteranUserThresholdMillis'],
        'displayedOnComments': value['displayedOnComments'],
        'receivedAt': ((value['receivedAt']).toISOString()),
        'order': value['order'],
    };
}

