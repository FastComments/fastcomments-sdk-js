/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RecordStringBeforeStringOrNullAfterStringOrNullValue
 */
export interface RecordStringBeforeStringOrNullAfterStringOrNullValue {
    /**
     * 
     * @type {string}
     * @memberof RecordStringBeforeStringOrNullAfterStringOrNullValue
     */
    after: string;
    /**
     * 
     * @type {string}
     * @memberof RecordStringBeforeStringOrNullAfterStringOrNullValue
     */
    before: string;
}

/**
 * Check if a given object implements the RecordStringBeforeStringOrNullAfterStringOrNullValue interface.
 */
export function instanceOfRecordStringBeforeStringOrNullAfterStringOrNullValue(value: object): value is RecordStringBeforeStringOrNullAfterStringOrNullValue {
    if (!('after' in value) || value['after'] === undefined) return false;
    if (!('before' in value) || value['before'] === undefined) return false;
    return true;
}

export function RecordStringBeforeStringOrNullAfterStringOrNullValueFromJSON(json: any): RecordStringBeforeStringOrNullAfterStringOrNullValue {
    return RecordStringBeforeStringOrNullAfterStringOrNullValueFromJSONTyped(json, false);
}

export function RecordStringBeforeStringOrNullAfterStringOrNullValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecordStringBeforeStringOrNullAfterStringOrNullValue {
    if (json == null) {
        return json;
    }
    return {
        
        'after': json['after'],
        'before': json['before'],
    };
}

export function RecordStringBeforeStringOrNullAfterStringOrNullValueToJSON(json: any): RecordStringBeforeStringOrNullAfterStringOrNullValue {
    return RecordStringBeforeStringOrNullAfterStringOrNullValueToJSONTyped(json, false);
}

export function RecordStringBeforeStringOrNullAfterStringOrNullValueToJSONTyped(value?: RecordStringBeforeStringOrNullAfterStringOrNullValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'after': value['after'],
        'before': value['before'],
    };
}

