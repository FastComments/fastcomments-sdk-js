/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QueryPredicate } from './QueryPredicate';
import {
    QueryPredicateFromJSON,
    QueryPredicateFromJSONTyped,
    QueryPredicateToJSON,
    QueryPredicateToJSONTyped,
} from './QueryPredicate';
import type { AggregationRequestSort } from './AggregationRequestSort';
import {
    AggregationRequestSortFromJSON,
    AggregationRequestSortFromJSONTyped,
    AggregationRequestSortToJSON,
    AggregationRequestSortToJSONTyped,
} from './AggregationRequestSort';
import type { AggregationOperation } from './AggregationOperation';
import {
    AggregationOperationFromJSON,
    AggregationOperationFromJSONTyped,
    AggregationOperationToJSON,
    AggregationOperationToJSONTyped,
} from './AggregationOperation';

/**
 * The aggregation request accepts a resource, optional grouping keys, an array of operations, and an optional sort
 * @export
 * @interface AggregationRequest
 */
export interface AggregationRequest {
    /**
     * 
     * @type {Array<QueryPredicate>}
     * @memberof AggregationRequest
     */
    query?: Array<QueryPredicate>;
    /**
     * 
     * @type {string}
     * @memberof AggregationRequest
     */
    resourceName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AggregationRequest
     */
    groupBy?: Array<string>;
    /**
     * 
     * @type {Array<AggregationOperation>}
     * @memberof AggregationRequest
     */
    operations: Array<AggregationOperation>;
    /**
     * 
     * @type {AggregationRequestSort}
     * @memberof AggregationRequest
     */
    sort?: AggregationRequestSort;
}

/**
 * Check if a given object implements the AggregationRequest interface.
 */
export function instanceOfAggregationRequest(value: object): value is AggregationRequest {
    if (!('resourceName' in value) || value['resourceName'] === undefined) return false;
    if (!('operations' in value) || value['operations'] === undefined) return false;
    return true;
}

export function AggregationRequestFromJSON(json: any): AggregationRequest {
    return AggregationRequestFromJSONTyped(json, false);
}

export function AggregationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AggregationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'query': json['query'] == null ? undefined : ((json['query'] as Array<any>).map(QueryPredicateFromJSON)),
        'resourceName': json['resourceName'],
        'groupBy': json['groupBy'] == null ? undefined : json['groupBy'],
        'operations': ((json['operations'] as Array<any>).map(AggregationOperationFromJSON)),
        'sort': json['sort'] == null ? undefined : AggregationRequestSortFromJSON(json['sort']),
    };
}

export function AggregationRequestToJSON(json: any): AggregationRequest {
    return AggregationRequestToJSONTyped(json, false);
}

export function AggregationRequestToJSONTyped(value?: AggregationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'query': value['query'] == null ? undefined : ((value['query'] as Array<any>).map(QueryPredicateToJSON)),
        'resourceName': value['resourceName'],
        'groupBy': value['groupBy'],
        'operations': ((value['operations'] as Array<any>).map(AggregationOperationToJSON)),
        'sort': AggregationRequestSortToJSON(value['sort']),
    };
}

