/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommentUserBadgeInfo
 */
export interface CommentUserBadgeInfo {
    /**
     * 
     * @type {string}
     * @memberof CommentUserBadgeInfo
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof CommentUserBadgeInfo
     */
    type: number;
    /**
     * 
     * @type {string}
     * @memberof CommentUserBadgeInfo
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof CommentUserBadgeInfo
     */
    displayLabel?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommentUserBadgeInfo
     */
    displaySrc?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommentUserBadgeInfo
     */
    backgroundColor?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommentUserBadgeInfo
     */
    borderColor?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommentUserBadgeInfo
     */
    textColor?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommentUserBadgeInfo
     */
    cssClass?: string | null;
}

/**
 * Check if a given object implements the CommentUserBadgeInfo interface.
 */
export function instanceOfCommentUserBadgeInfo(value: object): value is CommentUserBadgeInfo {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    return true;
}

export function CommentUserBadgeInfoFromJSON(json: any): CommentUserBadgeInfo {
    return CommentUserBadgeInfoFromJSONTyped(json, false);
}

export function CommentUserBadgeInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommentUserBadgeInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'description': json['description'],
        'displayLabel': json['displayLabel'] == null ? undefined : json['displayLabel'],
        'displaySrc': json['displaySrc'] == null ? undefined : json['displaySrc'],
        'backgroundColor': json['backgroundColor'] == null ? undefined : json['backgroundColor'],
        'borderColor': json['borderColor'] == null ? undefined : json['borderColor'],
        'textColor': json['textColor'] == null ? undefined : json['textColor'],
        'cssClass': json['cssClass'] == null ? undefined : json['cssClass'],
    };
}

export function CommentUserBadgeInfoToJSON(json: any): CommentUserBadgeInfo {
    return CommentUserBadgeInfoToJSONTyped(json, false);
}

export function CommentUserBadgeInfoToJSONTyped(value?: CommentUserBadgeInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'description': value['description'],
        'displayLabel': value['displayLabel'],
        'displaySrc': value['displaySrc'],
        'backgroundColor': value['backgroundColor'],
        'borderColor': value['borderColor'],
        'textColor': value['textColor'],
        'cssClass': value['cssClass'],
    };
}

