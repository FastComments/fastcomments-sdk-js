/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIError,
  BlockFromCommentPublic200Response,
  CheckedCommentsForBlocked200Response,
  CommentData,
  CommentTextUpdateRequest,
  CreateCommentPublic200Response,
  CreateFeedPostParams,
  CreateFeedPostPublic200Response,
  DeleteCommentPublic200Response,
  DeleteCommentVote200Response,
  DeleteFeedPostPublic200Response,
  FlagCommentPublic200Response,
  GetCommentText200Response,
  GetCommentVoteUserNames200Response,
  GetCommentsPublic200Response,
  GetEventLog200Response,
  GetFeedPostsPublic200Response,
  GetFeedPostsStats200Response,
  GetUserNotificationCount200Response,
  GetUserNotifications200Response,
  GetUserPresenceStatuses200Response,
  GetUserReactsPublic200Response,
  LockComment200Response,
  PinComment200Response,
  PublicBlockFromCommentParams,
  ReactBodyParams,
  ReactFeedPostPublic200Response,
  ResetUserNotifications200Response,
  SearchUsers200Response,
  SetCommentText200Response,
  SizePreset,
  SortDirections,
  UnBlockCommentPublic200Response,
  UpdateFeedPostParams,
  UpdateUserNotificationStatus200Response,
  UploadImageResponse,
  VoteBodyParams,
  VoteComment200Response,
} from '../models/index';
import {
    APIErrorFromJSON,
    APIErrorToJSON,
    BlockFromCommentPublic200ResponseFromJSON,
    BlockFromCommentPublic200ResponseToJSON,
    CheckedCommentsForBlocked200ResponseFromJSON,
    CheckedCommentsForBlocked200ResponseToJSON,
    CommentDataFromJSON,
    CommentDataToJSON,
    CommentTextUpdateRequestFromJSON,
    CommentTextUpdateRequestToJSON,
    CreateCommentPublic200ResponseFromJSON,
    CreateCommentPublic200ResponseToJSON,
    CreateFeedPostParamsFromJSON,
    CreateFeedPostParamsToJSON,
    CreateFeedPostPublic200ResponseFromJSON,
    CreateFeedPostPublic200ResponseToJSON,
    DeleteCommentPublic200ResponseFromJSON,
    DeleteCommentPublic200ResponseToJSON,
    DeleteCommentVote200ResponseFromJSON,
    DeleteCommentVote200ResponseToJSON,
    DeleteFeedPostPublic200ResponseFromJSON,
    DeleteFeedPostPublic200ResponseToJSON,
    FlagCommentPublic200ResponseFromJSON,
    FlagCommentPublic200ResponseToJSON,
    GetCommentText200ResponseFromJSON,
    GetCommentText200ResponseToJSON,
    GetCommentVoteUserNames200ResponseFromJSON,
    GetCommentVoteUserNames200ResponseToJSON,
    GetCommentsPublic200ResponseFromJSON,
    GetCommentsPublic200ResponseToJSON,
    GetEventLog200ResponseFromJSON,
    GetEventLog200ResponseToJSON,
    GetFeedPostsPublic200ResponseFromJSON,
    GetFeedPostsPublic200ResponseToJSON,
    GetFeedPostsStats200ResponseFromJSON,
    GetFeedPostsStats200ResponseToJSON,
    GetUserNotificationCount200ResponseFromJSON,
    GetUserNotificationCount200ResponseToJSON,
    GetUserNotifications200ResponseFromJSON,
    GetUserNotifications200ResponseToJSON,
    GetUserPresenceStatuses200ResponseFromJSON,
    GetUserPresenceStatuses200ResponseToJSON,
    GetUserReactsPublic200ResponseFromJSON,
    GetUserReactsPublic200ResponseToJSON,
    LockComment200ResponseFromJSON,
    LockComment200ResponseToJSON,
    PinComment200ResponseFromJSON,
    PinComment200ResponseToJSON,
    PublicBlockFromCommentParamsFromJSON,
    PublicBlockFromCommentParamsToJSON,
    ReactBodyParamsFromJSON,
    ReactBodyParamsToJSON,
    ReactFeedPostPublic200ResponseFromJSON,
    ReactFeedPostPublic200ResponseToJSON,
    ResetUserNotifications200ResponseFromJSON,
    ResetUserNotifications200ResponseToJSON,
    SearchUsers200ResponseFromJSON,
    SearchUsers200ResponseToJSON,
    SetCommentText200ResponseFromJSON,
    SetCommentText200ResponseToJSON,
    SizePresetFromJSON,
    SizePresetToJSON,
    SortDirectionsFromJSON,
    SortDirectionsToJSON,
    UnBlockCommentPublic200ResponseFromJSON,
    UnBlockCommentPublic200ResponseToJSON,
    UpdateFeedPostParamsFromJSON,
    UpdateFeedPostParamsToJSON,
    UpdateUserNotificationStatus200ResponseFromJSON,
    UpdateUserNotificationStatus200ResponseToJSON,
    UploadImageResponseFromJSON,
    UploadImageResponseToJSON,
    VoteBodyParamsFromJSON,
    VoteBodyParamsToJSON,
    VoteComment200ResponseFromJSON,
    VoteComment200ResponseToJSON,
} from '../models/index';

export interface BlockFromCommentPublicRequest {
    tenantId: string;
    commentId: string;
    publicBlockFromCommentParams: PublicBlockFromCommentParams;
    sso?: string;
}

export interface CheckedCommentsForBlockedRequest {
    tenantId: string;
    commentIds: string;
    sso?: string;
}

export interface CreateCommentPublicRequest {
    tenantId: string;
    urlId: string;
    broadcastId: string;
    commentData: CommentData;
    sessionId?: string;
    sso?: string;
}

export interface CreateFeedPostPublicRequest {
    tenantId: string;
    createFeedPostParams: CreateFeedPostParams;
    broadcastId?: string;
    sso?: string;
}

export interface DeleteCommentPublicRequest {
    tenantId: string;
    commentId: string;
    broadcastId: string;
    editKey?: string;
    sso?: string;
}

export interface DeleteCommentVoteRequest {
    tenantId: string;
    commentId: string;
    voteId: string;
    urlId: string;
    broadcastId: string;
    editKey?: string;
    sso?: string;
}

export interface DeleteFeedPostPublicRequest {
    tenantId: string;
    postId: string;
    broadcastId?: string;
    sso?: string;
}

export interface FlagCommentPublicRequest {
    tenantId: string;
    commentId: string;
    isFlagged: boolean;
    sso?: string;
}

export interface GetCommentTextRequest {
    tenantId: string;
    commentId: string;
    editKey?: string;
    sso?: string;
}

export interface GetCommentVoteUserNamesRequest {
    tenantId: string;
    commentId: string;
    dir: number;
    sso?: string;
}

export interface GetCommentsPublicRequest {
    tenantId: string;
    urlId: string;
    page?: number;
    direction?: SortDirections;
    sso?: string;
    skip?: number;
    skipChildren?: number;
    limit?: number;
    limitChildren?: number;
    countChildren?: boolean;
    fetchPageForCommentId?: string;
    includeConfig?: boolean;
    countAll?: boolean;
    includei10n?: boolean;
    locale?: string;
    modules?: string;
    isCrawler?: boolean;
    includeNotificationCount?: boolean;
    asTree?: boolean;
    maxTreeDepth?: number;
    useFullTranslationIds?: boolean;
    parentId?: string;
    searchText?: string;
    hashTags?: Array<string>;
    userId?: string;
    customConfigStr?: string;
    afterCommentId?: string;
    beforeCommentId?: string;
}

export interface GetEventLogRequest {
    tenantId: string;
    urlId: string;
    userIdWS: string;
    startTime: number;
    endTime: number;
}

export interface GetFeedPostsPublicRequest {
    tenantId: string;
    afterId?: string;
    limit?: number;
    tags?: Array<string>;
    sso?: string;
    isCrawler?: boolean;
    includeUserInfo?: boolean;
}

export interface GetFeedPostsStatsRequest {
    tenantId: string;
    postIds: Array<string>;
    sso?: string;
}

export interface GetGlobalEventLogRequest {
    tenantId: string;
    urlId: string;
    userIdWS: string;
    startTime: number;
    endTime: number;
}

export interface GetUserNotificationCountRequest {
    tenantId: string;
    sso?: string;
}

export interface GetUserNotificationsRequest {
    tenantId: string;
    pageSize?: number;
    afterId?: string;
    includeContext?: boolean;
    afterCreatedAt?: number;
    unreadOnly?: boolean;
    dmOnly?: boolean;
    noDm?: boolean;
    includeTranslations?: boolean;
    sso?: string;
}

export interface GetUserPresenceStatusesRequest {
    tenantId: string;
    urlIdWS: string;
    userIds: string;
}

export interface GetUserReactsPublicRequest {
    tenantId: string;
    postIds?: Array<string>;
    sso?: string;
}

export interface LockCommentRequest {
    tenantId: string;
    commentId: string;
    broadcastId: string;
    sso?: string;
}

export interface PinCommentRequest {
    tenantId: string;
    commentId: string;
    broadcastId: string;
    sso?: string;
}

export interface ReactFeedPostPublicRequest {
    tenantId: string;
    postId: string;
    reactBodyParams: ReactBodyParams;
    isUndo?: boolean;
    broadcastId?: string;
    sso?: string;
}

export interface ResetUserNotificationCountRequest {
    tenantId: string;
    sso?: string;
}

export interface ResetUserNotificationsRequest {
    tenantId: string;
    afterId?: string;
    afterCreatedAt?: number;
    unreadOnly?: boolean;
    dmOnly?: boolean;
    noDm?: boolean;
    sso?: string;
}

export interface SearchUsersRequest {
    tenantId: string;
    urlId: string;
    usernameStartsWith: string;
    mentionGroupIds?: Array<string>;
    sso?: string;
}

export interface SetCommentTextRequest {
    tenantId: string;
    commentId: string;
    broadcastId: string;
    commentTextUpdateRequest: CommentTextUpdateRequest;
    editKey?: string;
    sso?: string;
}

export interface UnBlockCommentPublicRequest {
    tenantId: string;
    commentId: string;
    publicBlockFromCommentParams: PublicBlockFromCommentParams;
    sso?: string;
}

export interface UnLockCommentRequest {
    tenantId: string;
    commentId: string;
    broadcastId: string;
    sso?: string;
}

export interface UnPinCommentRequest {
    tenantId: string;
    commentId: string;
    broadcastId: string;
    sso?: string;
}

export interface UpdateFeedPostPublicRequest {
    tenantId: string;
    postId: string;
    updateFeedPostParams: UpdateFeedPostParams;
    broadcastId?: string;
    sso?: string;
}

export interface UpdateUserNotificationCommentSubscriptionStatusRequest {
    tenantId: string;
    notificationId: string;
    optedInOrOut: UpdateUserNotificationCommentSubscriptionStatusOptedInOrOutEnum;
    commentId: string;
    sso?: string;
}

export interface UpdateUserNotificationPageSubscriptionStatusRequest {
    tenantId: string;
    urlId: string;
    url: string;
    pageTitle: string;
    subscribedOrUnsubscribed: UpdateUserNotificationPageSubscriptionStatusSubscribedOrUnsubscribedEnum;
    sso?: string;
}

export interface UpdateUserNotificationStatusRequest {
    tenantId: string;
    notificationId: string;
    newStatus: UpdateUserNotificationStatusNewStatusEnum;
    sso?: string;
}

export interface UploadImageRequest {
    tenantId: string;
    file: Blob;
    sizePreset?: SizePreset;
    urlId?: string;
}

export interface VoteCommentRequest {
    tenantId: string;
    commentId: string;
    urlId: string;
    broadcastId: string;
    voteBodyParams: VoteBodyParams;
    sessionId?: string;
    sso?: string;
}

/**
 * PublicApi - interface
 * 
 * @export
 * @interface PublicApiInterface
 */
export interface PublicApiInterface {
    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {PublicBlockFromCommentParams} publicBlockFromCommentParams 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    blockFromCommentPublicRaw(requestParameters: BlockFromCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockFromCommentPublic200Response>>;

    /**
     */
    blockFromCommentPublic(requestParameters: BlockFromCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockFromCommentPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentIds A comma separated list of comment ids.
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    checkedCommentsForBlockedRaw(requestParameters: CheckedCommentsForBlockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedCommentsForBlocked200Response>>;

    /**
     */
    checkedCommentsForBlocked(requestParameters: CheckedCommentsForBlockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedCommentsForBlocked200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} urlId 
     * @param {string} broadcastId 
     * @param {CommentData} commentData 
     * @param {string} [sessionId] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    createCommentPublicRaw(requestParameters: CreateCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommentPublic200Response>>;

    /**
     */
    createCommentPublic(requestParameters: CreateCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommentPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {CreateFeedPostParams} createFeedPostParams 
     * @param {string} [broadcastId] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    createFeedPostPublicRaw(requestParameters: CreateFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeedPostPublic200Response>>;

    /**
     */
    createFeedPostPublic(requestParameters: CreateFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeedPostPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {string} broadcastId 
     * @param {string} [editKey] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    deleteCommentPublicRaw(requestParameters: DeleteCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCommentPublic200Response>>;

    /**
     */
    deleteCommentPublic(requestParameters: DeleteCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCommentPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {string} voteId 
     * @param {string} urlId 
     * @param {string} broadcastId 
     * @param {string} [editKey] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    deleteCommentVoteRaw(requestParameters: DeleteCommentVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCommentVote200Response>>;

    /**
     */
    deleteCommentVote(requestParameters: DeleteCommentVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCommentVote200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} postId 
     * @param {string} [broadcastId] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    deleteFeedPostPublicRaw(requestParameters: DeleteFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFeedPostPublic200Response>>;

    /**
     */
    deleteFeedPostPublic(requestParameters: DeleteFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFeedPostPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {boolean} isFlagged 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    flagCommentPublicRaw(requestParameters: FlagCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagCommentPublic200Response>>;

    /**
     */
    flagCommentPublic(requestParameters: FlagCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagCommentPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {string} [editKey] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getCommentTextRaw(requestParameters: GetCommentTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentText200Response>>;

    /**
     */
    getCommentText(requestParameters: GetCommentTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentText200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {number} dir 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getCommentVoteUserNamesRaw(requestParameters: GetCommentVoteUserNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentVoteUserNames200Response>>;

    /**
     */
    getCommentVoteUserNames(requestParameters: GetCommentVoteUserNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentVoteUserNames200Response>;

    /**
     *  req tenantId urlId
     * @param {string} tenantId 
     * @param {string} urlId 
     * @param {number} [page] 
     * @param {SortDirections} [direction] 
     * @param {string} [sso] 
     * @param {number} [skip] 
     * @param {number} [skipChildren] 
     * @param {number} [limit] 
     * @param {number} [limitChildren] 
     * @param {boolean} [countChildren] 
     * @param {string} [fetchPageForCommentId] 
     * @param {boolean} [includeConfig] 
     * @param {boolean} [countAll] 
     * @param {boolean} [includei10n] 
     * @param {string} [locale] 
     * @param {string} [modules] 
     * @param {boolean} [isCrawler] 
     * @param {boolean} [includeNotificationCount] 
     * @param {boolean} [asTree] 
     * @param {number} [maxTreeDepth] 
     * @param {boolean} [useFullTranslationIds] 
     * @param {string} [parentId] 
     * @param {string} [searchText] 
     * @param {Array<string>} [hashTags] 
     * @param {string} [userId] 
     * @param {string} [customConfigStr] 
     * @param {string} [afterCommentId] 
     * @param {string} [beforeCommentId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getCommentsPublicRaw(requestParameters: GetCommentsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentsPublic200Response>>;

    /**
     *  req tenantId urlId
     */
    getCommentsPublic(requestParameters: GetCommentsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentsPublic200Response>;

    /**
     *  req tenantId urlId userIdWS
     * @param {string} tenantId 
     * @param {string} urlId 
     * @param {string} userIdWS 
     * @param {number} startTime 
     * @param {number} endTime 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getEventLogRaw(requestParameters: GetEventLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventLog200Response>>;

    /**
     *  req tenantId urlId userIdWS
     */
    getEventLog(requestParameters: GetEventLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventLog200Response>;

    /**
     *  req tenantId afterId
     * @param {string} tenantId 
     * @param {string} [afterId] 
     * @param {number} [limit] 
     * @param {Array<string>} [tags] 
     * @param {string} [sso] 
     * @param {boolean} [isCrawler] 
     * @param {boolean} [includeUserInfo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getFeedPostsPublicRaw(requestParameters: GetFeedPostsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeedPostsPublic200Response>>;

    /**
     *  req tenantId afterId
     */
    getFeedPostsPublic(requestParameters: GetFeedPostsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeedPostsPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {Array<string>} postIds 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getFeedPostsStatsRaw(requestParameters: GetFeedPostsStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeedPostsStats200Response>>;

    /**
     */
    getFeedPostsStats(requestParameters: GetFeedPostsStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeedPostsStats200Response>;

    /**
     *  req tenantId urlId userIdWS
     * @param {string} tenantId 
     * @param {string} urlId 
     * @param {string} userIdWS 
     * @param {number} startTime 
     * @param {number} endTime 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getGlobalEventLogRaw(requestParameters: GetGlobalEventLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventLog200Response>>;

    /**
     *  req tenantId urlId userIdWS
     */
    getGlobalEventLog(requestParameters: GetGlobalEventLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventLog200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getUserNotificationCountRaw(requestParameters: GetUserNotificationCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserNotificationCount200Response>>;

    /**
     */
    getUserNotificationCount(requestParameters: GetUserNotificationCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserNotificationCount200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {number} [pageSize] 
     * @param {string} [afterId] 
     * @param {boolean} [includeContext] 
     * @param {number} [afterCreatedAt] 
     * @param {boolean} [unreadOnly] 
     * @param {boolean} [dmOnly] 
     * @param {boolean} [noDm] 
     * @param {boolean} [includeTranslations] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getUserNotificationsRaw(requestParameters: GetUserNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserNotifications200Response>>;

    /**
     */
    getUserNotifications(requestParameters: GetUserNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserNotifications200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} urlIdWS 
     * @param {string} userIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getUserPresenceStatusesRaw(requestParameters: GetUserPresenceStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserPresenceStatuses200Response>>;

    /**
     */
    getUserPresenceStatuses(requestParameters: GetUserPresenceStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserPresenceStatuses200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {Array<string>} [postIds] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getUserReactsPublicRaw(requestParameters: GetUserReactsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserReactsPublic200Response>>;

    /**
     */
    getUserReactsPublic(requestParameters: GetUserReactsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserReactsPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {string} broadcastId 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    lockCommentRaw(requestParameters: LockCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LockComment200Response>>;

    /**
     */
    lockComment(requestParameters: LockCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LockComment200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {string} broadcastId 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    pinCommentRaw(requestParameters: PinCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PinComment200Response>>;

    /**
     */
    pinComment(requestParameters: PinCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PinComment200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} postId 
     * @param {ReactBodyParams} reactBodyParams 
     * @param {boolean} [isUndo] 
     * @param {string} [broadcastId] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    reactFeedPostPublicRaw(requestParameters: ReactFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactFeedPostPublic200Response>>;

    /**
     */
    reactFeedPostPublic(requestParameters: ReactFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactFeedPostPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    resetUserNotificationCountRaw(requestParameters: ResetUserNotificationCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetUserNotifications200Response>>;

    /**
     */
    resetUserNotificationCount(requestParameters: ResetUserNotificationCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetUserNotifications200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} [afterId] 
     * @param {number} [afterCreatedAt] 
     * @param {boolean} [unreadOnly] 
     * @param {boolean} [dmOnly] 
     * @param {boolean} [noDm] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    resetUserNotificationsRaw(requestParameters: ResetUserNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetUserNotifications200Response>>;

    /**
     */
    resetUserNotifications(requestParameters: ResetUserNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetUserNotifications200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} urlId 
     * @param {string} usernameStartsWith 
     * @param {Array<string>} [mentionGroupIds] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    searchUsersRaw(requestParameters: SearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchUsers200Response>>;

    /**
     */
    searchUsers(requestParameters: SearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchUsers200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {string} broadcastId 
     * @param {CommentTextUpdateRequest} commentTextUpdateRequest 
     * @param {string} [editKey] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    setCommentTextRaw(requestParameters: SetCommentTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetCommentText200Response>>;

    /**
     */
    setCommentText(requestParameters: SetCommentTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetCommentText200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {PublicBlockFromCommentParams} publicBlockFromCommentParams 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    unBlockCommentPublicRaw(requestParameters: UnBlockCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnBlockCommentPublic200Response>>;

    /**
     */
    unBlockCommentPublic(requestParameters: UnBlockCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnBlockCommentPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {string} broadcastId 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    unLockCommentRaw(requestParameters: UnLockCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LockComment200Response>>;

    /**
     */
    unLockComment(requestParameters: UnLockCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LockComment200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {string} broadcastId 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    unPinCommentRaw(requestParameters: UnPinCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PinComment200Response>>;

    /**
     */
    unPinComment(requestParameters: UnPinCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PinComment200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} postId 
     * @param {UpdateFeedPostParams} updateFeedPostParams 
     * @param {string} [broadcastId] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    updateFeedPostPublicRaw(requestParameters: UpdateFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeedPostPublic200Response>>;

    /**
     */
    updateFeedPostPublic(requestParameters: UpdateFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeedPostPublic200Response>;

    /**
     * Enable or disable notifications for a specific comment.
     * @param {string} tenantId 
     * @param {string} notificationId 
     * @param {'in' | 'out'} optedInOrOut 
     * @param {string} commentId 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    updateUserNotificationCommentSubscriptionStatusRaw(requestParameters: UpdateUserNotificationCommentSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserNotificationStatus200Response>>;

    /**
     * Enable or disable notifications for a specific comment.
     */
    updateUserNotificationCommentSubscriptionStatus(requestParameters: UpdateUserNotificationCommentSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserNotificationStatus200Response>;

    /**
     * Enable or disable notifications for a page. When users are subscribed to a page, notifications are created for new root comments, and also
     * @param {string} tenantId 
     * @param {string} urlId 
     * @param {string} url 
     * @param {string} pageTitle 
     * @param {'subscribe' | 'unsubscribe'} subscribedOrUnsubscribed 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    updateUserNotificationPageSubscriptionStatusRaw(requestParameters: UpdateUserNotificationPageSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserNotificationStatus200Response>>;

    /**
     * Enable or disable notifications for a page. When users are subscribed to a page, notifications are created for new root comments, and also
     */
    updateUserNotificationPageSubscriptionStatus(requestParameters: UpdateUserNotificationPageSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserNotificationStatus200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} notificationId 
     * @param {'read' | 'unread'} newStatus 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    updateUserNotificationStatusRaw(requestParameters: UpdateUserNotificationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserNotificationStatus200Response>>;

    /**
     */
    updateUserNotificationStatus(requestParameters: UpdateUserNotificationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserNotificationStatus200Response>;

    /**
     * Upload and resize an image
     * @param {string} tenantId 
     * @param {Blob} file 
     * @param {SizePreset} [sizePreset] Size preset: \&quot;Default\&quot; (1000x1000px) or \&quot;CrossPlatform\&quot; (creates sizes for popular devices)
     * @param {string} [urlId] Page id that upload is happening from, to configure
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    uploadImageRaw(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadImageResponse>>;

    /**
     * Upload and resize an image
     */
    uploadImage(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadImageResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} commentId 
     * @param {string} urlId 
     * @param {string} broadcastId 
     * @param {VoteBodyParams} voteBodyParams 
     * @param {string} [sessionId] 
     * @param {string} [sso] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    voteCommentRaw(requestParameters: VoteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VoteComment200Response>>;

    /**
     */
    voteComment(requestParameters: VoteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VoteComment200Response>;

}

/**
 * 
 */
export class PublicApi extends runtime.BaseAPI implements PublicApiInterface {

    /**
     */
    async blockFromCommentPublicRaw(requestParameters: BlockFromCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockFromCommentPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling blockFromCommentPublic().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling blockFromCommentPublic().'
            );
        }

        if (requestParameters['publicBlockFromCommentParams'] == null) {
            throw new runtime.RequiredError(
                'publicBlockFromCommentParams',
                'Required parameter "publicBlockFromCommentParams" was null or undefined when calling blockFromCommentPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/block-from-comment/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicBlockFromCommentParamsToJSON(requestParameters['publicBlockFromCommentParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockFromCommentPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async blockFromCommentPublic(requestParameters: BlockFromCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockFromCommentPublic200Response> {
        const response = await this.blockFromCommentPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async checkedCommentsForBlockedRaw(requestParameters: CheckedCommentsForBlockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedCommentsForBlocked200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling checkedCommentsForBlocked().'
            );
        }

        if (requestParameters['commentIds'] == null) {
            throw new runtime.RequiredError(
                'commentIds',
                'Required parameter "commentIds" was null or undefined when calling checkedCommentsForBlocked().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['commentIds'] != null) {
            queryParameters['commentIds'] = requestParameters['commentIds'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/check-blocked-comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckedCommentsForBlocked200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async checkedCommentsForBlocked(requestParameters: CheckedCommentsForBlockedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedCommentsForBlocked200Response> {
        const response = await this.checkedCommentsForBlockedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createCommentPublicRaw(requestParameters: CreateCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommentPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling createCommentPublic().'
            );
        }

        if (requestParameters['urlId'] == null) {
            throw new runtime.RequiredError(
                'urlId',
                'Required parameter "urlId" was null or undefined when calling createCommentPublic().'
            );
        }

        if (requestParameters['broadcastId'] == null) {
            throw new runtime.RequiredError(
                'broadcastId',
                'Required parameter "broadcastId" was null or undefined when calling createCommentPublic().'
            );
        }

        if (requestParameters['commentData'] == null) {
            throw new runtime.RequiredError(
                'commentData',
                'Required parameter "commentData" was null or undefined when calling createCommentPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['sessionId'] != null) {
            queryParameters['sessionId'] = requestParameters['sessionId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/comments/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentDataToJSON(requestParameters['commentData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommentPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async createCommentPublic(requestParameters: CreateCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommentPublic200Response> {
        const response = await this.createCommentPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createFeedPostPublicRaw(requestParameters: CreateFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeedPostPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling createFeedPostPublic().'
            );
        }

        if (requestParameters['createFeedPostParams'] == null) {
            throw new runtime.RequiredError(
                'createFeedPostParams',
                'Required parameter "createFeedPostParams" was null or undefined when calling createFeedPostPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/feed-posts/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeedPostParamsToJSON(requestParameters['createFeedPostParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFeedPostPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async createFeedPostPublic(requestParameters: CreateFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeedPostPublic200Response> {
        const response = await this.createFeedPostPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteCommentPublicRaw(requestParameters: DeleteCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCommentPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteCommentPublic().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling deleteCommentPublic().'
            );
        }

        if (requestParameters['broadcastId'] == null) {
            throw new runtime.RequiredError(
                'broadcastId',
                'Required parameter "broadcastId" was null or undefined when calling deleteCommentPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['editKey'] != null) {
            queryParameters['editKey'] = requestParameters['editKey'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comments/{tenantId}/{commentId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCommentPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteCommentPublic(requestParameters: DeleteCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCommentPublic200Response> {
        const response = await this.deleteCommentPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteCommentVoteRaw(requestParameters: DeleteCommentVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCommentVote200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteCommentVote().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling deleteCommentVote().'
            );
        }

        if (requestParameters['voteId'] == null) {
            throw new runtime.RequiredError(
                'voteId',
                'Required parameter "voteId" was null or undefined when calling deleteCommentVote().'
            );
        }

        if (requestParameters['urlId'] == null) {
            throw new runtime.RequiredError(
                'urlId',
                'Required parameter "urlId" was null or undefined when calling deleteCommentVote().'
            );
        }

        if (requestParameters['broadcastId'] == null) {
            throw new runtime.RequiredError(
                'broadcastId',
                'Required parameter "broadcastId" was null or undefined when calling deleteCommentVote().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['editKey'] != null) {
            queryParameters['editKey'] = requestParameters['editKey'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comments/{tenantId}/{commentId}/vote/{voteId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))).replace(`{${"voteId"}}`, encodeURIComponent(String(requestParameters['voteId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCommentVote200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteCommentVote(requestParameters: DeleteCommentVoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCommentVote200Response> {
        const response = await this.deleteCommentVoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteFeedPostPublicRaw(requestParameters: DeleteFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFeedPostPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteFeedPostPublic().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling deleteFeedPostPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/feed-posts/{tenantId}/{postId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFeedPostPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteFeedPostPublic(requestParameters: DeleteFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFeedPostPublic200Response> {
        const response = await this.deleteFeedPostPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async flagCommentPublicRaw(requestParameters: FlagCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagCommentPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling flagCommentPublic().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling flagCommentPublic().'
            );
        }

        if (requestParameters['isFlagged'] == null) {
            throw new runtime.RequiredError(
                'isFlagged',
                'Required parameter "isFlagged" was null or undefined when calling flagCommentPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['isFlagged'] != null) {
            queryParameters['isFlagged'] = requestParameters['isFlagged'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/flag-comment/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlagCommentPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async flagCommentPublic(requestParameters: FlagCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagCommentPublic200Response> {
        const response = await this.flagCommentPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCommentTextRaw(requestParameters: GetCommentTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentText200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getCommentText().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling getCommentText().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['editKey'] != null) {
            queryParameters['editKey'] = requestParameters['editKey'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comments/{tenantId}/{commentId}/text`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommentText200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getCommentText(requestParameters: GetCommentTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentText200Response> {
        const response = await this.getCommentTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCommentVoteUserNamesRaw(requestParameters: GetCommentVoteUserNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentVoteUserNames200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getCommentVoteUserNames().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling getCommentVoteUserNames().'
            );
        }

        if (requestParameters['dir'] == null) {
            throw new runtime.RequiredError(
                'dir',
                'Required parameter "dir" was null or undefined when calling getCommentVoteUserNames().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['dir'] != null) {
            queryParameters['dir'] = requestParameters['dir'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comments/{tenantId}/{commentId}/votes`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommentVoteUserNames200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getCommentVoteUserNames(requestParameters: GetCommentVoteUserNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentVoteUserNames200Response> {
        const response = await this.getCommentVoteUserNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  req tenantId urlId
     */
    async getCommentsPublicRaw(requestParameters: GetCommentsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommentsPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getCommentsPublic().'
            );
        }

        if (requestParameters['urlId'] == null) {
            throw new runtime.RequiredError(
                'urlId',
                'Required parameter "urlId" was null or undefined when calling getCommentsPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['skipChildren'] != null) {
            queryParameters['skipChildren'] = requestParameters['skipChildren'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['limitChildren'] != null) {
            queryParameters['limitChildren'] = requestParameters['limitChildren'];
        }

        if (requestParameters['countChildren'] != null) {
            queryParameters['countChildren'] = requestParameters['countChildren'];
        }

        if (requestParameters['fetchPageForCommentId'] != null) {
            queryParameters['fetchPageForCommentId'] = requestParameters['fetchPageForCommentId'];
        }

        if (requestParameters['includeConfig'] != null) {
            queryParameters['includeConfig'] = requestParameters['includeConfig'];
        }

        if (requestParameters['countAll'] != null) {
            queryParameters['countAll'] = requestParameters['countAll'];
        }

        if (requestParameters['includei10n'] != null) {
            queryParameters['includei10n'] = requestParameters['includei10n'];
        }

        if (requestParameters['locale'] != null) {
            queryParameters['locale'] = requestParameters['locale'];
        }

        if (requestParameters['modules'] != null) {
            queryParameters['modules'] = requestParameters['modules'];
        }

        if (requestParameters['isCrawler'] != null) {
            queryParameters['isCrawler'] = requestParameters['isCrawler'];
        }

        if (requestParameters['includeNotificationCount'] != null) {
            queryParameters['includeNotificationCount'] = requestParameters['includeNotificationCount'];
        }

        if (requestParameters['asTree'] != null) {
            queryParameters['asTree'] = requestParameters['asTree'];
        }

        if (requestParameters['maxTreeDepth'] != null) {
            queryParameters['maxTreeDepth'] = requestParameters['maxTreeDepth'];
        }

        if (requestParameters['useFullTranslationIds'] != null) {
            queryParameters['useFullTranslationIds'] = requestParameters['useFullTranslationIds'];
        }

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['searchText'] != null) {
            queryParameters['searchText'] = requestParameters['searchText'];
        }

        if (requestParameters['hashTags'] != null) {
            queryParameters['hashTags'] = requestParameters['hashTags'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['customConfigStr'] != null) {
            queryParameters['customConfigStr'] = requestParameters['customConfigStr'];
        }

        if (requestParameters['afterCommentId'] != null) {
            queryParameters['afterCommentId'] = requestParameters['afterCommentId'];
        }

        if (requestParameters['beforeCommentId'] != null) {
            queryParameters['beforeCommentId'] = requestParameters['beforeCommentId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comments/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommentsPublic200ResponseFromJSON(jsonValue));
    }

    /**
     *  req tenantId urlId
     */
    async getCommentsPublic(requestParameters: GetCommentsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommentsPublic200Response> {
        const response = await this.getCommentsPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  req tenantId urlId userIdWS
     */
    async getEventLogRaw(requestParameters: GetEventLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventLog200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getEventLog().'
            );
        }

        if (requestParameters['urlId'] == null) {
            throw new runtime.RequiredError(
                'urlId',
                'Required parameter "urlId" was null or undefined when calling getEventLog().'
            );
        }

        if (requestParameters['userIdWS'] == null) {
            throw new runtime.RequiredError(
                'userIdWS',
                'Required parameter "userIdWS" was null or undefined when calling getEventLog().'
            );
        }

        if (requestParameters['startTime'] == null) {
            throw new runtime.RequiredError(
                'startTime',
                'Required parameter "startTime" was null or undefined when calling getEventLog().'
            );
        }

        if (requestParameters['endTime'] == null) {
            throw new runtime.RequiredError(
                'endTime',
                'Required parameter "endTime" was null or undefined when calling getEventLog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['userIdWS'] != null) {
            queryParameters['userIdWS'] = requestParameters['userIdWS'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = requestParameters['startTime'];
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = requestParameters['endTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event-log/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEventLog200ResponseFromJSON(jsonValue));
    }

    /**
     *  req tenantId urlId userIdWS
     */
    async getEventLog(requestParameters: GetEventLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventLog200Response> {
        const response = await this.getEventLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  req tenantId afterId
     */
    async getFeedPostsPublicRaw(requestParameters: GetFeedPostsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeedPostsPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getFeedPostsPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['afterId'] != null) {
            queryParameters['afterId'] = requestParameters['afterId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        if (requestParameters['isCrawler'] != null) {
            queryParameters['isCrawler'] = requestParameters['isCrawler'];
        }

        if (requestParameters['includeUserInfo'] != null) {
            queryParameters['includeUserInfo'] = requestParameters['includeUserInfo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/feed-posts/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFeedPostsPublic200ResponseFromJSON(jsonValue));
    }

    /**
     *  req tenantId afterId
     */
    async getFeedPostsPublic(requestParameters: GetFeedPostsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeedPostsPublic200Response> {
        const response = await this.getFeedPostsPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeedPostsStatsRaw(requestParameters: GetFeedPostsStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeedPostsStats200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getFeedPostsStats().'
            );
        }

        if (requestParameters['postIds'] == null) {
            throw new runtime.RequiredError(
                'postIds',
                'Required parameter "postIds" was null or undefined when calling getFeedPostsStats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postIds'] != null) {
            queryParameters['postIds'] = requestParameters['postIds'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/feed-posts/{tenantId}/stats`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFeedPostsStats200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getFeedPostsStats(requestParameters: GetFeedPostsStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeedPostsStats200Response> {
        const response = await this.getFeedPostsStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  req tenantId urlId userIdWS
     */
    async getGlobalEventLogRaw(requestParameters: GetGlobalEventLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEventLog200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getGlobalEventLog().'
            );
        }

        if (requestParameters['urlId'] == null) {
            throw new runtime.RequiredError(
                'urlId',
                'Required parameter "urlId" was null or undefined when calling getGlobalEventLog().'
            );
        }

        if (requestParameters['userIdWS'] == null) {
            throw new runtime.RequiredError(
                'userIdWS',
                'Required parameter "userIdWS" was null or undefined when calling getGlobalEventLog().'
            );
        }

        if (requestParameters['startTime'] == null) {
            throw new runtime.RequiredError(
                'startTime',
                'Required parameter "startTime" was null or undefined when calling getGlobalEventLog().'
            );
        }

        if (requestParameters['endTime'] == null) {
            throw new runtime.RequiredError(
                'endTime',
                'Required parameter "endTime" was null or undefined when calling getGlobalEventLog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['userIdWS'] != null) {
            queryParameters['userIdWS'] = requestParameters['userIdWS'];
        }

        if (requestParameters['startTime'] != null) {
            queryParameters['startTime'] = requestParameters['startTime'];
        }

        if (requestParameters['endTime'] != null) {
            queryParameters['endTime'] = requestParameters['endTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/event-log/global/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEventLog200ResponseFromJSON(jsonValue));
    }

    /**
     *  req tenantId urlId userIdWS
     */
    async getGlobalEventLog(requestParameters: GetGlobalEventLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEventLog200Response> {
        const response = await this.getGlobalEventLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserNotificationCountRaw(requestParameters: GetUserNotificationCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserNotificationCount200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getUserNotificationCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-notifications/get-count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserNotificationCount200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserNotificationCount(requestParameters: GetUserNotificationCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserNotificationCount200Response> {
        const response = await this.getUserNotificationCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserNotificationsRaw(requestParameters: GetUserNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserNotifications200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getUserNotifications().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['afterId'] != null) {
            queryParameters['afterId'] = requestParameters['afterId'];
        }

        if (requestParameters['includeContext'] != null) {
            queryParameters['includeContext'] = requestParameters['includeContext'];
        }

        if (requestParameters['afterCreatedAt'] != null) {
            queryParameters['afterCreatedAt'] = requestParameters['afterCreatedAt'];
        }

        if (requestParameters['unreadOnly'] != null) {
            queryParameters['unreadOnly'] = requestParameters['unreadOnly'];
        }

        if (requestParameters['dmOnly'] != null) {
            queryParameters['dmOnly'] = requestParameters['dmOnly'];
        }

        if (requestParameters['noDm'] != null) {
            queryParameters['noDm'] = requestParameters['noDm'];
        }

        if (requestParameters['includeTranslations'] != null) {
            queryParameters['includeTranslations'] = requestParameters['includeTranslations'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserNotifications200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserNotifications(requestParameters: GetUserNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserNotifications200Response> {
        const response = await this.getUserNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserPresenceStatusesRaw(requestParameters: GetUserPresenceStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserPresenceStatuses200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getUserPresenceStatuses().'
            );
        }

        if (requestParameters['urlIdWS'] == null) {
            throw new runtime.RequiredError(
                'urlIdWS',
                'Required parameter "urlIdWS" was null or undefined when calling getUserPresenceStatuses().'
            );
        }

        if (requestParameters['userIds'] == null) {
            throw new runtime.RequiredError(
                'userIds',
                'Required parameter "userIds" was null or undefined when calling getUserPresenceStatuses().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['urlIdWS'] != null) {
            queryParameters['urlIdWS'] = requestParameters['urlIdWS'];
        }

        if (requestParameters['userIds'] != null) {
            queryParameters['userIds'] = requestParameters['userIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-presence-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserPresenceStatuses200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserPresenceStatuses(requestParameters: GetUserPresenceStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserPresenceStatuses200Response> {
        const response = await this.getUserPresenceStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserReactsPublicRaw(requestParameters: GetUserReactsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserReactsPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getUserReactsPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['postIds'] != null) {
            queryParameters['postIds'] = requestParameters['postIds'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/feed-posts/{tenantId}/user-reacts`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserReactsPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserReactsPublic(requestParameters: GetUserReactsPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserReactsPublic200Response> {
        const response = await this.getUserReactsPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async lockCommentRaw(requestParameters: LockCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LockComment200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling lockComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling lockComment().'
            );
        }

        if (requestParameters['broadcastId'] == null) {
            throw new runtime.RequiredError(
                'broadcastId',
                'Required parameter "broadcastId" was null or undefined when calling lockComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comments/{tenantId}/{commentId}/lock`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LockComment200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async lockComment(requestParameters: LockCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LockComment200Response> {
        const response = await this.lockCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pinCommentRaw(requestParameters: PinCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PinComment200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling pinComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling pinComment().'
            );
        }

        if (requestParameters['broadcastId'] == null) {
            throw new runtime.RequiredError(
                'broadcastId',
                'Required parameter "broadcastId" was null or undefined when calling pinComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comments/{tenantId}/{commentId}/pin`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PinComment200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async pinComment(requestParameters: PinCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PinComment200Response> {
        const response = await this.pinCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reactFeedPostPublicRaw(requestParameters: ReactFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReactFeedPostPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling reactFeedPostPublic().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling reactFeedPostPublic().'
            );
        }

        if (requestParameters['reactBodyParams'] == null) {
            throw new runtime.RequiredError(
                'reactBodyParams',
                'Required parameter "reactBodyParams" was null or undefined when calling reactFeedPostPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isUndo'] != null) {
            queryParameters['isUndo'] = requestParameters['isUndo'];
        }

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/feed-posts/{tenantId}/react/{postId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReactBodyParamsToJSON(requestParameters['reactBodyParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReactFeedPostPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async reactFeedPostPublic(requestParameters: ReactFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReactFeedPostPublic200Response> {
        const response = await this.reactFeedPostPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resetUserNotificationCountRaw(requestParameters: ResetUserNotificationCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetUserNotifications200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling resetUserNotificationCount().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-notifications/reset-count`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetUserNotifications200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async resetUserNotificationCount(requestParameters: ResetUserNotificationCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetUserNotifications200Response> {
        const response = await this.resetUserNotificationCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resetUserNotificationsRaw(requestParameters: ResetUserNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetUserNotifications200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling resetUserNotifications().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['afterId'] != null) {
            queryParameters['afterId'] = requestParameters['afterId'];
        }

        if (requestParameters['afterCreatedAt'] != null) {
            queryParameters['afterCreatedAt'] = requestParameters['afterCreatedAt'];
        }

        if (requestParameters['unreadOnly'] != null) {
            queryParameters['unreadOnly'] = requestParameters['unreadOnly'];
        }

        if (requestParameters['dmOnly'] != null) {
            queryParameters['dmOnly'] = requestParameters['dmOnly'];
        }

        if (requestParameters['noDm'] != null) {
            queryParameters['noDm'] = requestParameters['noDm'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-notifications/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetUserNotifications200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async resetUserNotifications(requestParameters: ResetUserNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetUserNotifications200Response> {
        const response = await this.resetUserNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchUsersRaw(requestParameters: SearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchUsers200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling searchUsers().'
            );
        }

        if (requestParameters['urlId'] == null) {
            throw new runtime.RequiredError(
                'urlId',
                'Required parameter "urlId" was null or undefined when calling searchUsers().'
            );
        }

        if (requestParameters['usernameStartsWith'] == null) {
            throw new runtime.RequiredError(
                'usernameStartsWith',
                'Required parameter "usernameStartsWith" was null or undefined when calling searchUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['usernameStartsWith'] != null) {
            queryParameters['usernameStartsWith'] = requestParameters['usernameStartsWith'];
        }

        if (requestParameters['mentionGroupIds'] != null) {
            queryParameters['mentionGroupIds'] = requestParameters['mentionGroupIds'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-search/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchUsers200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async searchUsers(requestParameters: SearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchUsers200Response> {
        const response = await this.searchUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setCommentTextRaw(requestParameters: SetCommentTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetCommentText200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling setCommentText().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling setCommentText().'
            );
        }

        if (requestParameters['broadcastId'] == null) {
            throw new runtime.RequiredError(
                'broadcastId',
                'Required parameter "broadcastId" was null or undefined when calling setCommentText().'
            );
        }

        if (requestParameters['commentTextUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'commentTextUpdateRequest',
                'Required parameter "commentTextUpdateRequest" was null or undefined when calling setCommentText().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['editKey'] != null) {
            queryParameters['editKey'] = requestParameters['editKey'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/comments/{tenantId}/{commentId}/update-text`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentTextUpdateRequestToJSON(requestParameters['commentTextUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetCommentText200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async setCommentText(requestParameters: SetCommentTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetCommentText200Response> {
        const response = await this.setCommentTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unBlockCommentPublicRaw(requestParameters: UnBlockCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnBlockCommentPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling unBlockCommentPublic().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling unBlockCommentPublic().'
            );
        }

        if (requestParameters['publicBlockFromCommentParams'] == null) {
            throw new runtime.RequiredError(
                'publicBlockFromCommentParams',
                'Required parameter "publicBlockFromCommentParams" was null or undefined when calling unBlockCommentPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/block-from-comment/{commentId}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: PublicBlockFromCommentParamsToJSON(requestParameters['publicBlockFromCommentParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnBlockCommentPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async unBlockCommentPublic(requestParameters: UnBlockCommentPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnBlockCommentPublic200Response> {
        const response = await this.unBlockCommentPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unLockCommentRaw(requestParameters: UnLockCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LockComment200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling unLockComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling unLockComment().'
            );
        }

        if (requestParameters['broadcastId'] == null) {
            throw new runtime.RequiredError(
                'broadcastId',
                'Required parameter "broadcastId" was null or undefined when calling unLockComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comments/{tenantId}/{commentId}/unlock`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LockComment200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async unLockComment(requestParameters: UnLockCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LockComment200Response> {
        const response = await this.unLockCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unPinCommentRaw(requestParameters: UnPinCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PinComment200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling unPinComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling unPinComment().'
            );
        }

        if (requestParameters['broadcastId'] == null) {
            throw new runtime.RequiredError(
                'broadcastId',
                'Required parameter "broadcastId" was null or undefined when calling unPinComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comments/{tenantId}/{commentId}/unpin`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PinComment200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async unPinComment(requestParameters: UnPinCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PinComment200Response> {
        const response = await this.unPinCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateFeedPostPublicRaw(requestParameters: UpdateFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeedPostPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateFeedPostPublic().'
            );
        }

        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling updateFeedPostPublic().'
            );
        }

        if (requestParameters['updateFeedPostParams'] == null) {
            throw new runtime.RequiredError(
                'updateFeedPostParams',
                'Required parameter "updateFeedPostParams" was null or undefined when calling updateFeedPostPublic().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/feed-posts/{tenantId}/{postId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFeedPostParamsToJSON(requestParameters['updateFeedPostParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFeedPostPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateFeedPostPublic(requestParameters: UpdateFeedPostPublicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeedPostPublic200Response> {
        const response = await this.updateFeedPostPublicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable or disable notifications for a specific comment.
     */
    async updateUserNotificationCommentSubscriptionStatusRaw(requestParameters: UpdateUserNotificationCommentSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserNotificationStatus200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateUserNotificationCommentSubscriptionStatus().'
            );
        }

        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling updateUserNotificationCommentSubscriptionStatus().'
            );
        }

        if (requestParameters['optedInOrOut'] == null) {
            throw new runtime.RequiredError(
                'optedInOrOut',
                'Required parameter "optedInOrOut" was null or undefined when calling updateUserNotificationCommentSubscriptionStatus().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling updateUserNotificationCommentSubscriptionStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['commentId'] != null) {
            queryParameters['commentId'] = requestParameters['commentId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-notifications/{notificationId}/mark-opted/{optedInOrOut}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters['notificationId']))).replace(`{${"optedInOrOut"}}`, encodeURIComponent(String(requestParameters['optedInOrOut']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserNotificationStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Enable or disable notifications for a specific comment.
     */
    async updateUserNotificationCommentSubscriptionStatus(requestParameters: UpdateUserNotificationCommentSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserNotificationStatus200Response> {
        const response = await this.updateUserNotificationCommentSubscriptionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable or disable notifications for a page. When users are subscribed to a page, notifications are created for new root comments, and also
     */
    async updateUserNotificationPageSubscriptionStatusRaw(requestParameters: UpdateUserNotificationPageSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserNotificationStatus200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateUserNotificationPageSubscriptionStatus().'
            );
        }

        if (requestParameters['urlId'] == null) {
            throw new runtime.RequiredError(
                'urlId',
                'Required parameter "urlId" was null or undefined when calling updateUserNotificationPageSubscriptionStatus().'
            );
        }

        if (requestParameters['url'] == null) {
            throw new runtime.RequiredError(
                'url',
                'Required parameter "url" was null or undefined when calling updateUserNotificationPageSubscriptionStatus().'
            );
        }

        if (requestParameters['pageTitle'] == null) {
            throw new runtime.RequiredError(
                'pageTitle',
                'Required parameter "pageTitle" was null or undefined when calling updateUserNotificationPageSubscriptionStatus().'
            );
        }

        if (requestParameters['subscribedOrUnsubscribed'] == null) {
            throw new runtime.RequiredError(
                'subscribedOrUnsubscribed',
                'Required parameter "subscribedOrUnsubscribed" was null or undefined when calling updateUserNotificationPageSubscriptionStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['url'] != null) {
            queryParameters['url'] = requestParameters['url'];
        }

        if (requestParameters['pageTitle'] != null) {
            queryParameters['pageTitle'] = requestParameters['pageTitle'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-notifications/set-subscription-state/{subscribedOrUnsubscribed}`.replace(`{${"subscribedOrUnsubscribed"}}`, encodeURIComponent(String(requestParameters['subscribedOrUnsubscribed']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserNotificationStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Enable or disable notifications for a page. When users are subscribed to a page, notifications are created for new root comments, and also
     */
    async updateUserNotificationPageSubscriptionStatus(requestParameters: UpdateUserNotificationPageSubscriptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserNotificationStatus200Response> {
        const response = await this.updateUserNotificationPageSubscriptionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserNotificationStatusRaw(requestParameters: UpdateUserNotificationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserNotificationStatus200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateUserNotificationStatus().'
            );
        }

        if (requestParameters['notificationId'] == null) {
            throw new runtime.RequiredError(
                'notificationId',
                'Required parameter "notificationId" was null or undefined when calling updateUserNotificationStatus().'
            );
        }

        if (requestParameters['newStatus'] == null) {
            throw new runtime.RequiredError(
                'newStatus',
                'Required parameter "newStatus" was null or undefined when calling updateUserNotificationStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user-notifications/{notificationId}/mark/{newStatus}`.replace(`{${"notificationId"}}`, encodeURIComponent(String(requestParameters['notificationId']))).replace(`{${"newStatus"}}`, encodeURIComponent(String(requestParameters['newStatus']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserNotificationStatus200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateUserNotificationStatus(requestParameters: UpdateUserNotificationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserNotificationStatus200Response> {
        const response = await this.updateUserNotificationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload and resize an image
     */
    async uploadImageRaw(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadImageResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling uploadImage().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadImage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sizePreset'] != null) {
            queryParameters['sizePreset'] = requestParameters['sizePreset'];
        }

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/upload-image/{tenantId}`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadImageResponseFromJSON(jsonValue));
    }

    /**
     * Upload and resize an image
     */
    async uploadImage(requestParameters: UploadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadImageResponse> {
        const response = await this.uploadImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async voteCommentRaw(requestParameters: VoteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VoteComment200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling voteComment().'
            );
        }

        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling voteComment().'
            );
        }

        if (requestParameters['urlId'] == null) {
            throw new runtime.RequiredError(
                'urlId',
                'Required parameter "urlId" was null or undefined when calling voteComment().'
            );
        }

        if (requestParameters['broadcastId'] == null) {
            throw new runtime.RequiredError(
                'broadcastId',
                'Required parameter "broadcastId" was null or undefined when calling voteComment().'
            );
        }

        if (requestParameters['voteBodyParams'] == null) {
            throw new runtime.RequiredError(
                'voteBodyParams',
                'Required parameter "voteBodyParams" was null or undefined when calling voteComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['sessionId'] != null) {
            queryParameters['sessionId'] = requestParameters['sessionId'];
        }

        if (requestParameters['sso'] != null) {
            queryParameters['sso'] = requestParameters['sso'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/comments/{tenantId}/{commentId}/vote`.replace(`{${"tenantId"}}`, encodeURIComponent(String(requestParameters['tenantId']))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VoteBodyParamsToJSON(requestParameters['voteBodyParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VoteComment200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async voteComment(requestParameters: VoteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VoteComment200Response> {
        const response = await this.voteCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum UpdateUserNotificationCommentSubscriptionStatusOptedInOrOutEnum {
    in = 'in',
    out = 'out'
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateUserNotificationPageSubscriptionStatusSubscribedOrUnsubscribedEnum {
    subscribe = 'subscribe',
    unsubscribe = 'unsubscribe'
}
/**
  * @export
  * @enum {string}
  */
export enum UpdateUserNotificationStatusNewStatusEnum {
    read = 'read',
    unread = 'unread'
}
