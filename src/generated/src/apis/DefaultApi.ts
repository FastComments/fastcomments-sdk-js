/* tslint:disable */
/* eslint-disable */
/**
 * fastcomments
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddDomainConfig200Response,
  AddDomainConfigParams,
  AddPageAPIResponse,
  AddSSOUserAPIResponse,
  AggregateQuestionResults200Response,
  AggregateTimeBucket,
  AggregationRequest,
  AggregationResponse,
  BlockFromCommentParams,
  BlockFromCommentPublic200Response,
  BulkAggregateQuestionResults200Response,
  BulkAggregateQuestionResultsRequest,
  CombineCommentsWithQuestionResults200Response,
  CreateAPIPageData,
  CreateAPISSOUserData,
  CreateAPIUserSubscriptionData,
  CreateCommentParams,
  CreateFeedPost200Response,
  CreateFeedPostParams,
  CreateSubscriptionAPIResponse,
  CreateUserBadge200Response,
  CreateUserBadgeParams,
  DeleteComment200Response,
  DeleteDomainConfig200Response,
  DeletePageAPIResponse,
  DeleteSSOUserAPIResponse,
  DeleteSubscriptionAPIResponse,
  FeedPost,
  FlagComment200Response,
  FlagCommentPublic200Response,
  GetAuditLogs200Response,
  GetComment200Response,
  GetComments200Response,
  GetDomainConfig200Response,
  GetDomainConfigs200Response,
  GetFeedPosts200Response,
  GetPageByURLIdAPIResponse,
  GetPagesAPIResponse,
  GetSSOUserByEmailAPIResponse,
  GetSSOUserByIdAPIResponse,
  GetSSOUsers200Response,
  GetSubscriptionsAPIResponse,
  GetUserBadge200Response,
  GetUserBadgeProgressById200Response,
  GetUserBadgeProgressList200Response,
  GetUserBadges200Response,
  PatchDomainConfigParams,
  PatchPageAPIResponse,
  PatchSSOUserAPIResponse,
  PickAPICommentUpdatableCommentFields,
  PutSSOUserAPIResponse,
  SORTDIR,
  SaveComment200Response,
  SortDirections,
  UnBlockCommentPublic200Response,
  UnBlockFromCommentParams,
  UpdateAPIPageData,
  UpdateAPISSOUserData,
  UpdateDomainConfigParams,
  UpdateUserBadge200Response,
  UpdateUserBadgeParams,
} from '../models/index';
import {
    AddDomainConfig200ResponseFromJSON,
    AddDomainConfig200ResponseToJSON,
    AddDomainConfigParamsFromJSON,
    AddDomainConfigParamsToJSON,
    AddPageAPIResponseFromJSON,
    AddPageAPIResponseToJSON,
    AddSSOUserAPIResponseFromJSON,
    AddSSOUserAPIResponseToJSON,
    AggregateQuestionResults200ResponseFromJSON,
    AggregateQuestionResults200ResponseToJSON,
    AggregateTimeBucketFromJSON,
    AggregateTimeBucketToJSON,
    AggregationRequestFromJSON,
    AggregationRequestToJSON,
    AggregationResponseFromJSON,
    AggregationResponseToJSON,
    BlockFromCommentParamsFromJSON,
    BlockFromCommentParamsToJSON,
    BlockFromCommentPublic200ResponseFromJSON,
    BlockFromCommentPublic200ResponseToJSON,
    BulkAggregateQuestionResults200ResponseFromJSON,
    BulkAggregateQuestionResults200ResponseToJSON,
    BulkAggregateQuestionResultsRequestFromJSON,
    BulkAggregateQuestionResultsRequestToJSON,
    CombineCommentsWithQuestionResults200ResponseFromJSON,
    CombineCommentsWithQuestionResults200ResponseToJSON,
    CreateAPIPageDataFromJSON,
    CreateAPIPageDataToJSON,
    CreateAPISSOUserDataFromJSON,
    CreateAPISSOUserDataToJSON,
    CreateAPIUserSubscriptionDataFromJSON,
    CreateAPIUserSubscriptionDataToJSON,
    CreateCommentParamsFromJSON,
    CreateCommentParamsToJSON,
    CreateFeedPost200ResponseFromJSON,
    CreateFeedPost200ResponseToJSON,
    CreateFeedPostParamsFromJSON,
    CreateFeedPostParamsToJSON,
    CreateSubscriptionAPIResponseFromJSON,
    CreateSubscriptionAPIResponseToJSON,
    CreateUserBadge200ResponseFromJSON,
    CreateUserBadge200ResponseToJSON,
    CreateUserBadgeParamsFromJSON,
    CreateUserBadgeParamsToJSON,
    DeleteComment200ResponseFromJSON,
    DeleteComment200ResponseToJSON,
    DeleteDomainConfig200ResponseFromJSON,
    DeleteDomainConfig200ResponseToJSON,
    DeletePageAPIResponseFromJSON,
    DeletePageAPIResponseToJSON,
    DeleteSSOUserAPIResponseFromJSON,
    DeleteSSOUserAPIResponseToJSON,
    DeleteSubscriptionAPIResponseFromJSON,
    DeleteSubscriptionAPIResponseToJSON,
    FeedPostFromJSON,
    FeedPostToJSON,
    FlagComment200ResponseFromJSON,
    FlagComment200ResponseToJSON,
    FlagCommentPublic200ResponseFromJSON,
    FlagCommentPublic200ResponseToJSON,
    GetAuditLogs200ResponseFromJSON,
    GetAuditLogs200ResponseToJSON,
    GetComment200ResponseFromJSON,
    GetComment200ResponseToJSON,
    GetComments200ResponseFromJSON,
    GetComments200ResponseToJSON,
    GetDomainConfig200ResponseFromJSON,
    GetDomainConfig200ResponseToJSON,
    GetDomainConfigs200ResponseFromJSON,
    GetDomainConfigs200ResponseToJSON,
    GetFeedPosts200ResponseFromJSON,
    GetFeedPosts200ResponseToJSON,
    GetPageByURLIdAPIResponseFromJSON,
    GetPageByURLIdAPIResponseToJSON,
    GetPagesAPIResponseFromJSON,
    GetPagesAPIResponseToJSON,
    GetSSOUserByEmailAPIResponseFromJSON,
    GetSSOUserByEmailAPIResponseToJSON,
    GetSSOUserByIdAPIResponseFromJSON,
    GetSSOUserByIdAPIResponseToJSON,
    GetSSOUsers200ResponseFromJSON,
    GetSSOUsers200ResponseToJSON,
    GetSubscriptionsAPIResponseFromJSON,
    GetSubscriptionsAPIResponseToJSON,
    GetUserBadge200ResponseFromJSON,
    GetUserBadge200ResponseToJSON,
    GetUserBadgeProgressById200ResponseFromJSON,
    GetUserBadgeProgressById200ResponseToJSON,
    GetUserBadgeProgressList200ResponseFromJSON,
    GetUserBadgeProgressList200ResponseToJSON,
    GetUserBadges200ResponseFromJSON,
    GetUserBadges200ResponseToJSON,
    PatchDomainConfigParamsFromJSON,
    PatchDomainConfigParamsToJSON,
    PatchPageAPIResponseFromJSON,
    PatchPageAPIResponseToJSON,
    PatchSSOUserAPIResponseFromJSON,
    PatchSSOUserAPIResponseToJSON,
    PickAPICommentUpdatableCommentFieldsFromJSON,
    PickAPICommentUpdatableCommentFieldsToJSON,
    PutSSOUserAPIResponseFromJSON,
    PutSSOUserAPIResponseToJSON,
    SORTDIRFromJSON,
    SORTDIRToJSON,
    SaveComment200ResponseFromJSON,
    SaveComment200ResponseToJSON,
    SortDirectionsFromJSON,
    SortDirectionsToJSON,
    UnBlockCommentPublic200ResponseFromJSON,
    UnBlockCommentPublic200ResponseToJSON,
    UnBlockFromCommentParamsFromJSON,
    UnBlockFromCommentParamsToJSON,
    UpdateAPIPageDataFromJSON,
    UpdateAPIPageDataToJSON,
    UpdateAPISSOUserDataFromJSON,
    UpdateAPISSOUserDataToJSON,
    UpdateDomainConfigParamsFromJSON,
    UpdateDomainConfigParamsToJSON,
    UpdateUserBadge200ResponseFromJSON,
    UpdateUserBadge200ResponseToJSON,
    UpdateUserBadgeParamsFromJSON,
    UpdateUserBadgeParamsToJSON,
} from '../models/index';

export interface AddDomainConfigRequest {
    tenantId: string;
    addDomainConfigParams: AddDomainConfigParams;
}

export interface AddPageRequest {
    tenantId: string;
    createAPIPageData: CreateAPIPageData;
}

export interface AddSSOUserRequest {
    tenantId: string;
    createAPISSOUserData: CreateAPISSOUserData;
}

export interface AggregateRequest {
    tenantId: string;
    aggregationRequest: AggregationRequest;
    parentTenantId?: string;
    includeStats?: boolean;
}

export interface AggregateQuestionResultsRequest {
    tenantId: string;
    questionId?: string;
    questionIds?: Array<string>;
    urlId?: string;
    timeBucket?: AggregateTimeBucket;
    startDate?: Date;
    forceRecalculate?: boolean;
}

export interface BlockUserFromCommentRequest {
    tenantId: string;
    id: string;
    blockFromCommentParams: BlockFromCommentParams;
    userId?: string;
    anonUserId?: string;
}

export interface BulkAggregateQuestionResultsOperationRequest {
    tenantId: string;
    bulkAggregateQuestionResultsRequest: BulkAggregateQuestionResultsRequest;
    forceRecalculate?: boolean;
}

export interface CombineCommentsWithQuestionResultsRequest {
    tenantId: string;
    questionId?: string;
    questionIds?: Array<string>;
    urlId?: string;
    startDate?: Date;
    forceRecalculate?: boolean;
    minValue?: number;
    maxValue?: number;
    limit?: number;
}

export interface CreateFeedPostRequest {
    tenantId: string;
    createFeedPostParams: CreateFeedPostParams;
    broadcastId?: string;
    isLive?: boolean;
    doSpamCheck?: boolean;
    skipDupCheck?: boolean;
}

export interface CreateSubscriptionRequest {
    tenantId: string;
    createAPIUserSubscriptionData: CreateAPIUserSubscriptionData;
}

export interface CreateUserBadgeRequest {
    tenantId: string;
    createUserBadgeParams: CreateUserBadgeParams;
}

export interface DeleteCommentRequest {
    tenantId: string;
    id: string;
    contextUserId?: string;
    isLive?: boolean;
}

export interface DeleteDomainConfigRequest {
    tenantId: string;
    domain: string;
}

export interface DeletePageRequest {
    tenantId: string;
    id: string;
}

export interface DeleteSSOUserRequest {
    tenantId: string;
    id: string;
    deleteComments?: boolean;
    commentDeleteMode?: string;
}

export interface DeleteSubscriptionRequest {
    tenantId: string;
    id: string;
    userId?: string;
}

export interface DeleteUserBadgeRequest {
    tenantId: string;
    id: string;
}

export interface FlagCommentRequest {
    tenantId: string;
    id: string;
    userId?: string;
    anonUserId?: string;
}

export interface GetAuditLogsRequest {
    tenantId: string;
    limit?: number;
    skip?: number;
    order?: SORTDIR;
    after?: number;
    before?: number;
}

export interface GetCommentRequest {
    tenantId: string;
    id: string;
}

export interface GetCommentsRequest {
    tenantId: string;
    page?: number;
    limit?: number;
    skip?: number;
    asTree?: boolean;
    skipChildren?: number;
    limitChildren?: number;
    maxTreeDepth?: number;
    urlId?: string;
    userId?: string;
    anonUserId?: string;
    contextUserId?: string;
    hashTag?: string;
    parentId?: string;
    direction?: SortDirections;
}

export interface GetDomainConfigRequest {
    tenantId: string;
    domain: string;
}

export interface GetDomainConfigsRequest {
    tenantId: string;
}

export interface GetFeedPostsRequest {
    tenantId: string;
    afterId?: string;
    limit?: number;
    tags?: Array<string>;
}

export interface GetPageByURLIdRequest {
    tenantId: string;
    urlId: string;
}

export interface GetPagesRequest {
    tenantId: string;
}

export interface GetSSOUserByEmailRequest {
    tenantId: string;
    email: string;
}

export interface GetSSOUserByIdRequest {
    tenantId: string;
    id: string;
}

export interface GetSSOUsersRequest {
    tenantId: string;
    skip?: number;
}

export interface GetSubscriptionsRequest {
    tenantId: string;
    userId?: string;
}

export interface GetUserBadgeRequest {
    tenantId: string;
    id: string;
}

export interface GetUserBadgeProgressByIdRequest {
    tenantId: string;
    id: string;
}

export interface GetUserBadgeProgressByUserIdRequest {
    tenantId: string;
    userId: string;
}

export interface GetUserBadgeProgressListRequest {
    tenantId: string;
    userId?: string;
    limit?: number;
    skip?: number;
}

export interface GetUserBadgesRequest {
    tenantId: string;
    userId?: string;
    badgeId?: string;
    type?: number;
    displayedOnComments?: boolean;
    limit?: number;
    skip?: number;
}

export interface PatchDomainConfigRequest {
    tenantId: string;
    domainToUpdate: string;
    patchDomainConfigParams: PatchDomainConfigParams;
}

export interface PatchPageRequest {
    tenantId: string;
    id: string;
    updateAPIPageData: UpdateAPIPageData;
}

export interface PatchSSOUserRequest {
    tenantId: string;
    id: string;
    updateAPISSOUserData: UpdateAPISSOUserData;
    updateComments?: boolean;
}

export interface PutDomainConfigRequest {
    tenantId: string;
    domainToUpdate: string;
    updateDomainConfigParams: UpdateDomainConfigParams;
}

export interface PutSSOUserRequest {
    tenantId: string;
    id: string;
    updateAPISSOUserData: UpdateAPISSOUserData;
    updateComments?: boolean;
}

export interface SaveCommentRequest {
    tenantId: string;
    createCommentParams: CreateCommentParams;
    isLive?: boolean;
    doSpamCheck?: boolean;
    sendEmails?: boolean;
    populateNotifications?: boolean;
}

export interface SaveCommentsBulkRequest {
    tenantId: string;
    createCommentParams: Array<CreateCommentParams>;
    isLive?: boolean;
    doSpamCheck?: boolean;
    sendEmails?: boolean;
    populateNotifications?: boolean;
}

export interface UnBlockUserFromCommentRequest {
    tenantId: string;
    id: string;
    unBlockFromCommentParams: UnBlockFromCommentParams;
    userId?: string;
    anonUserId?: string;
}

export interface UnFlagCommentRequest {
    tenantId: string;
    id: string;
    userId?: string;
    anonUserId?: string;
}

export interface UpdateCommentRequest {
    tenantId: string;
    id: string;
    body: PickAPICommentUpdatableCommentFields;
    contextUserId?: string;
    doSpamCheck?: boolean;
    isLive?: boolean;
}

export interface UpdateFeedPostRequest {
    tenantId: string;
    id: string;
    feedPost: FeedPost;
}

export interface UpdateUserBadgeRequest {
    tenantId: string;
    id: string;
    updateUserBadgeParams: UpdateUserBadgeParams;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * 
     * @param {string} tenantId 
     * @param {AddDomainConfigParams} addDomainConfigParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    addDomainConfigRaw(requestParameters: AddDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddDomainConfig200Response>>;

    /**
     */
    addDomainConfig(requestParameters: AddDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddDomainConfig200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {CreateAPIPageData} createAPIPageData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    addPageRaw(requestParameters: AddPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPageAPIResponse>>;

    /**
     */
    addPage(requestParameters: AddPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPageAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {CreateAPISSOUserData} createAPISSOUserData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    addSSOUserRaw(requestParameters: AddSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddSSOUserAPIResponse>>;

    /**
     */
    addSSOUser(requestParameters: AddSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddSSOUserAPIResponse>;

    /**
     * Aggregates documents by grouping them (if groupBy is provided) and applying multiple operations. Different operations (e.g. sum, countDistinct, avg, etc.) are supported.
     * @param {string} tenantId 
     * @param {AggregationRequest} aggregationRequest 
     * @param {string} [parentTenantId] 
     * @param {boolean} [includeStats] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    aggregateRaw(requestParameters: AggregateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AggregationResponse>>;

    /**
     * Aggregates documents by grouping them (if groupBy is provided) and applying multiple operations. Different operations (e.g. sum, countDistinct, avg, etc.) are supported.
     */
    aggregate(requestParameters: AggregateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AggregationResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} [questionId] 
     * @param {Array<string>} [questionIds] 
     * @param {string} [urlId] 
     * @param {AggregateTimeBucket} [timeBucket] 
     * @param {Date} [startDate] 
     * @param {boolean} [forceRecalculate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    aggregateQuestionResultsRaw(requestParameters: AggregateQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AggregateQuestionResults200Response>>;

    /**
     */
    aggregateQuestionResults(requestParameters: AggregateQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AggregateQuestionResults200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {BlockFromCommentParams} blockFromCommentParams 
     * @param {string} [userId] 
     * @param {string} [anonUserId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    blockUserFromCommentRaw(requestParameters: BlockUserFromCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockFromCommentPublic200Response>>;

    /**
     */
    blockUserFromComment(requestParameters: BlockUserFromCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockFromCommentPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {BulkAggregateQuestionResultsRequest} bulkAggregateQuestionResultsRequest 
     * @param {boolean} [forceRecalculate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    bulkAggregateQuestionResultsRaw(requestParameters: BulkAggregateQuestionResultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkAggregateQuestionResults200Response>>;

    /**
     */
    bulkAggregateQuestionResults(requestParameters: BulkAggregateQuestionResultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkAggregateQuestionResults200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} [questionId] 
     * @param {Array<string>} [questionIds] 
     * @param {string} [urlId] 
     * @param {Date} [startDate] 
     * @param {boolean} [forceRecalculate] 
     * @param {number} [minValue] 
     * @param {number} [maxValue] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    combineCommentsWithQuestionResultsRaw(requestParameters: CombineCommentsWithQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineCommentsWithQuestionResults200Response>>;

    /**
     */
    combineCommentsWithQuestionResults(requestParameters: CombineCommentsWithQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineCommentsWithQuestionResults200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {CreateFeedPostParams} createFeedPostParams 
     * @param {string} [broadcastId] 
     * @param {boolean} [isLive] 
     * @param {boolean} [doSpamCheck] 
     * @param {boolean} [skipDupCheck] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createFeedPostRaw(requestParameters: CreateFeedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeedPost200Response>>;

    /**
     */
    createFeedPost(requestParameters: CreateFeedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeedPost200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {CreateAPIUserSubscriptionData} createAPIUserSubscriptionData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createSubscriptionRaw(requestParameters: CreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSubscriptionAPIResponse>>;

    /**
     */
    createSubscription(requestParameters: CreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSubscriptionAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {CreateUserBadgeParams} createUserBadgeParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createUserBadgeRaw(requestParameters: CreateUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserBadge200Response>>;

    /**
     */
    createUserBadge(requestParameters: CreateUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserBadge200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {string} [contextUserId] 
     * @param {boolean} [isLive] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteCommentRaw(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteComment200Response>>;

    /**
     */
    deleteComment(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteComment200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} domain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteDomainConfigRaw(requestParameters: DeleteDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDomainConfig200Response>>;

    /**
     */
    deleteDomainConfig(requestParameters: DeleteDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDomainConfig200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deletePageRaw(requestParameters: DeletePageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePageAPIResponse>>;

    /**
     */
    deletePage(requestParameters: DeletePageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePageAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {boolean} [deleteComments] 
     * @param {string} [commentDeleteMode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteSSOUserRaw(requestParameters: DeleteSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSSOUserAPIResponse>>;

    /**
     */
    deleteSSOUser(requestParameters: DeleteSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSSOUserAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteSubscriptionRaw(requestParameters: DeleteSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSubscriptionAPIResponse>>;

    /**
     */
    deleteSubscription(requestParameters: DeleteSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSubscriptionAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteUserBadgeRaw(requestParameters: DeleteUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserBadge200Response>>;

    /**
     */
    deleteUserBadge(requestParameters: DeleteUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserBadge200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {string} [userId] 
     * @param {string} [anonUserId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    flagCommentRaw(requestParameters: FlagCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagComment200Response>>;

    /**
     */
    flagComment(requestParameters: FlagCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagComment200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {number} [limit] 
     * @param {number} [skip] 
     * @param {SORTDIR} [order] 
     * @param {number} [after] 
     * @param {number} [before] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getAuditLogsRaw(requestParameters: GetAuditLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAuditLogs200Response>>;

    /**
     */
    getAuditLogs(requestParameters: GetAuditLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAuditLogs200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCommentRaw(requestParameters: GetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetComment200Response>>;

    /**
     */
    getComment(requestParameters: GetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetComment200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {number} [skip] 
     * @param {boolean} [asTree] 
     * @param {number} [skipChildren] 
     * @param {number} [limitChildren] 
     * @param {number} [maxTreeDepth] 
     * @param {string} [urlId] 
     * @param {string} [userId] 
     * @param {string} [anonUserId] 
     * @param {string} [contextUserId] 
     * @param {string} [hashTag] 
     * @param {string} [parentId] 
     * @param {SortDirections} [direction] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCommentsRaw(requestParameters: GetCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetComments200Response>>;

    /**
     */
    getComments(requestParameters: GetCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetComments200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} domain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDomainConfigRaw(requestParameters: GetDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDomainConfig200Response>>;

    /**
     */
    getDomainConfig(requestParameters: GetDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDomainConfig200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDomainConfigsRaw(requestParameters: GetDomainConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDomainConfigs200Response>>;

    /**
     */
    getDomainConfigs(requestParameters: GetDomainConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDomainConfigs200Response>;

    /**
     *  req tenantId afterId
     * @param {string} tenantId 
     * @param {string} [afterId] 
     * @param {number} [limit] 
     * @param {Array<string>} [tags] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getFeedPostsRaw(requestParameters: GetFeedPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeedPosts200Response>>;

    /**
     *  req tenantId afterId
     */
    getFeedPosts(requestParameters: GetFeedPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeedPosts200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} urlId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPageByURLIdRaw(requestParameters: GetPageByURLIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPageByURLIdAPIResponse>>;

    /**
     */
    getPageByURLId(requestParameters: GetPageByURLIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPageByURLIdAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getPagesRaw(requestParameters: GetPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPagesAPIResponse>>;

    /**
     */
    getPages(requestParameters: GetPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPagesAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSSOUserByEmailRaw(requestParameters: GetSSOUserByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSSOUserByEmailAPIResponse>>;

    /**
     */
    getSSOUserByEmail(requestParameters: GetSSOUserByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSSOUserByEmailAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSSOUserByIdRaw(requestParameters: GetSSOUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSSOUserByIdAPIResponse>>;

    /**
     */
    getSSOUserById(requestParameters: GetSSOUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSSOUserByIdAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSSOUsersRaw(requestParameters: GetSSOUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSSOUsers200Response>>;

    /**
     */
    getSSOUsers(requestParameters: GetSSOUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSSOUsers200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSubscriptionsRaw(requestParameters: GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubscriptionsAPIResponse>>;

    /**
     */
    getSubscriptions(requestParameters: GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubscriptionsAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserBadgeRaw(requestParameters: GetUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserBadge200Response>>;

    /**
     */
    getUserBadge(requestParameters: GetUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserBadge200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserBadgeProgressByIdRaw(requestParameters: GetUserBadgeProgressByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserBadgeProgressById200Response>>;

    /**
     */
    getUserBadgeProgressById(requestParameters: GetUserBadgeProgressByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserBadgeProgressById200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserBadgeProgressByUserIdRaw(requestParameters: GetUserBadgeProgressByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserBadgeProgressById200Response>>;

    /**
     */
    getUserBadgeProgressByUserId(requestParameters: GetUserBadgeProgressByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserBadgeProgressById200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} [userId] 
     * @param {number} [limit] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserBadgeProgressListRaw(requestParameters: GetUserBadgeProgressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserBadgeProgressList200Response>>;

    /**
     */
    getUserBadgeProgressList(requestParameters: GetUserBadgeProgressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserBadgeProgressList200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} [userId] 
     * @param {string} [badgeId] 
     * @param {number} [type] 
     * @param {boolean} [displayedOnComments] 
     * @param {number} [limit] 
     * @param {number} [skip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getUserBadgesRaw(requestParameters: GetUserBadgesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserBadges200Response>>;

    /**
     */
    getUserBadges(requestParameters: GetUserBadgesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserBadges200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} domainToUpdate 
     * @param {PatchDomainConfigParams} patchDomainConfigParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    patchDomainConfigRaw(requestParameters: PatchDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDomainConfig200Response>>;

    /**
     */
    patchDomainConfig(requestParameters: PatchDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDomainConfig200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {UpdateAPIPageData} updateAPIPageData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    patchPageRaw(requestParameters: PatchPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchPageAPIResponse>>;

    /**
     */
    patchPage(requestParameters: PatchPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchPageAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {UpdateAPISSOUserData} updateAPISSOUserData 
     * @param {boolean} [updateComments] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    patchSSOUserRaw(requestParameters: PatchSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchSSOUserAPIResponse>>;

    /**
     */
    patchSSOUser(requestParameters: PatchSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchSSOUserAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} domainToUpdate 
     * @param {UpdateDomainConfigParams} updateDomainConfigParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putDomainConfigRaw(requestParameters: PutDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDomainConfig200Response>>;

    /**
     */
    putDomainConfig(requestParameters: PutDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDomainConfig200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {UpdateAPISSOUserData} updateAPISSOUserData 
     * @param {boolean} [updateComments] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putSSOUserRaw(requestParameters: PutSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutSSOUserAPIResponse>>;

    /**
     */
    putSSOUser(requestParameters: PutSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutSSOUserAPIResponse>;

    /**
     * 
     * @param {string} tenantId 
     * @param {CreateCommentParams} createCommentParams 
     * @param {boolean} [isLive] 
     * @param {boolean} [doSpamCheck] 
     * @param {boolean} [sendEmails] 
     * @param {boolean} [populateNotifications] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    saveCommentRaw(requestParameters: SaveCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaveComment200Response>>;

    /**
     */
    saveComment(requestParameters: SaveCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaveComment200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {Array<CreateCommentParams>} createCommentParams 
     * @param {boolean} [isLive] 
     * @param {boolean} [doSpamCheck] 
     * @param {boolean} [sendEmails] 
     * @param {boolean} [populateNotifications] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    saveCommentsBulkRaw(requestParameters: SaveCommentsBulkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SaveComment200Response>>>;

    /**
     */
    saveCommentsBulk(requestParameters: SaveCommentsBulkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SaveComment200Response>>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {UnBlockFromCommentParams} unBlockFromCommentParams 
     * @param {string} [userId] 
     * @param {string} [anonUserId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    unBlockUserFromCommentRaw(requestParameters: UnBlockUserFromCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnBlockCommentPublic200Response>>;

    /**
     */
    unBlockUserFromComment(requestParameters: UnBlockUserFromCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnBlockCommentPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {string} [userId] 
     * @param {string} [anonUserId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    unFlagCommentRaw(requestParameters: UnFlagCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagComment200Response>>;

    /**
     */
    unFlagComment(requestParameters: UnFlagCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagComment200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {PickAPICommentUpdatableCommentFields} body 
     * @param {string} [contextUserId] 
     * @param {boolean} [doSpamCheck] 
     * @param {boolean} [isLive] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateCommentRaw(requestParameters: UpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagCommentPublic200Response>>;

    /**
     */
    updateComment(requestParameters: UpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagCommentPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {FeedPost} feedPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateFeedPostRaw(requestParameters: UpdateFeedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagCommentPublic200Response>>;

    /**
     */
    updateFeedPost(requestParameters: UpdateFeedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagCommentPublic200Response>;

    /**
     * 
     * @param {string} tenantId 
     * @param {string} id 
     * @param {UpdateUserBadgeParams} updateUserBadgeParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateUserBadgeRaw(requestParameters: UpdateUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserBadge200Response>>;

    /**
     */
    updateUserBadge(requestParameters: UpdateUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserBadge200Response>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     */
    async addDomainConfigRaw(requestParameters: AddDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddDomainConfig200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling addDomainConfig().'
            );
        }

        if (requestParameters['addDomainConfigParams'] == null) {
            throw new runtime.RequiredError(
                'addDomainConfigParams',
                'Required parameter "addDomainConfigParams" was null or undefined when calling addDomainConfig().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/domain-configs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDomainConfigParamsToJSON(requestParameters['addDomainConfigParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddDomainConfig200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async addDomainConfig(requestParameters: AddDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddDomainConfig200Response> {
        const response = await this.addDomainConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addPageRaw(requestParameters: AddPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPageAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling addPage().'
            );
        }

        if (requestParameters['createAPIPageData'] == null) {
            throw new runtime.RequiredError(
                'createAPIPageData',
                'Required parameter "createAPIPageData" was null or undefined when calling addPage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/pages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAPIPageDataToJSON(requestParameters['createAPIPageData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPageAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async addPage(requestParameters: AddPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPageAPIResponse> {
        const response = await this.addPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addSSOUserRaw(requestParameters: AddSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddSSOUserAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling addSSOUser().'
            );
        }

        if (requestParameters['createAPISSOUserData'] == null) {
            throw new runtime.RequiredError(
                'createAPISSOUserData',
                'Required parameter "createAPISSOUserData" was null or undefined when calling addSSOUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/sso-users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAPISSOUserDataToJSON(requestParameters['createAPISSOUserData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddSSOUserAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async addSSOUser(requestParameters: AddSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddSSOUserAPIResponse> {
        const response = await this.addSSOUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Aggregates documents by grouping them (if groupBy is provided) and applying multiple operations. Different operations (e.g. sum, countDistinct, avg, etc.) are supported.
     */
    async aggregateRaw(requestParameters: AggregateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AggregationResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling aggregate().'
            );
        }

        if (requestParameters['aggregationRequest'] == null) {
            throw new runtime.RequiredError(
                'aggregationRequest',
                'Required parameter "aggregationRequest" was null or undefined when calling aggregate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['parentTenantId'] != null) {
            queryParameters['parentTenantId'] = requestParameters['parentTenantId'];
        }

        if (requestParameters['includeStats'] != null) {
            queryParameters['includeStats'] = requestParameters['includeStats'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/aggregate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AggregationRequestToJSON(requestParameters['aggregationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AggregationResponseFromJSON(jsonValue));
    }

    /**
     * Aggregates documents by grouping them (if groupBy is provided) and applying multiple operations. Different operations (e.g. sum, countDistinct, avg, etc.) are supported.
     */
    async aggregate(requestParameters: AggregateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AggregationResponse> {
        const response = await this.aggregateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async aggregateQuestionResultsRaw(requestParameters: AggregateQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AggregateQuestionResults200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling aggregateQuestionResults().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['questionId'] != null) {
            queryParameters['questionId'] = requestParameters['questionId'];
        }

        if (requestParameters['questionIds'] != null) {
            queryParameters['questionIds'] = requestParameters['questionIds'];
        }

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['timeBucket'] != null) {
            queryParameters['timeBucket'] = requestParameters['timeBucket'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['forceRecalculate'] != null) {
            queryParameters['forceRecalculate'] = requestParameters['forceRecalculate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/question-results-aggregation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AggregateQuestionResults200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async aggregateQuestionResults(requestParameters: AggregateQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AggregateQuestionResults200Response> {
        const response = await this.aggregateQuestionResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async blockUserFromCommentRaw(requestParameters: BlockUserFromCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockFromCommentPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling blockUserFromComment().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling blockUserFromComment().'
            );
        }

        if (requestParameters['blockFromCommentParams'] == null) {
            throw new runtime.RequiredError(
                'blockFromCommentParams',
                'Required parameter "blockFromCommentParams" was null or undefined when calling blockUserFromComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['anonUserId'] != null) {
            queryParameters['anonUserId'] = requestParameters['anonUserId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/comments/{id}/block`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockFromCommentParamsToJSON(requestParameters['blockFromCommentParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockFromCommentPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async blockUserFromComment(requestParameters: BlockUserFromCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockFromCommentPublic200Response> {
        const response = await this.blockUserFromCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async bulkAggregateQuestionResultsRaw(requestParameters: BulkAggregateQuestionResultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkAggregateQuestionResults200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling bulkAggregateQuestionResults().'
            );
        }

        if (requestParameters['bulkAggregateQuestionResultsRequest'] == null) {
            throw new runtime.RequiredError(
                'bulkAggregateQuestionResultsRequest',
                'Required parameter "bulkAggregateQuestionResultsRequest" was null or undefined when calling bulkAggregateQuestionResults().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['forceRecalculate'] != null) {
            queryParameters['forceRecalculate'] = requestParameters['forceRecalculate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/question-results-aggregation/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkAggregateQuestionResultsRequestToJSON(requestParameters['bulkAggregateQuestionResultsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkAggregateQuestionResults200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async bulkAggregateQuestionResults(requestParameters: BulkAggregateQuestionResultsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkAggregateQuestionResults200Response> {
        const response = await this.bulkAggregateQuestionResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async combineCommentsWithQuestionResultsRaw(requestParameters: CombineCommentsWithQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineCommentsWithQuestionResults200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling combineCommentsWithQuestionResults().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['questionId'] != null) {
            queryParameters['questionId'] = requestParameters['questionId'];
        }

        if (requestParameters['questionIds'] != null) {
            queryParameters['questionIds'] = requestParameters['questionIds'];
        }

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['forceRecalculate'] != null) {
            queryParameters['forceRecalculate'] = requestParameters['forceRecalculate'];
        }

        if (requestParameters['minValue'] != null) {
            queryParameters['minValue'] = requestParameters['minValue'];
        }

        if (requestParameters['maxValue'] != null) {
            queryParameters['maxValue'] = requestParameters['maxValue'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/question-results-aggregation/combine/comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CombineCommentsWithQuestionResults200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async combineCommentsWithQuestionResults(requestParameters: CombineCommentsWithQuestionResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineCommentsWithQuestionResults200Response> {
        const response = await this.combineCommentsWithQuestionResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createFeedPostRaw(requestParameters: CreateFeedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateFeedPost200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling createFeedPost().'
            );
        }

        if (requestParameters['createFeedPostParams'] == null) {
            throw new runtime.RequiredError(
                'createFeedPostParams',
                'Required parameter "createFeedPostParams" was null or undefined when calling createFeedPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['broadcastId'] != null) {
            queryParameters['broadcastId'] = requestParameters['broadcastId'];
        }

        if (requestParameters['isLive'] != null) {
            queryParameters['isLive'] = requestParameters['isLive'];
        }

        if (requestParameters['doSpamCheck'] != null) {
            queryParameters['doSpamCheck'] = requestParameters['doSpamCheck'];
        }

        if (requestParameters['skipDupCheck'] != null) {
            queryParameters['skipDupCheck'] = requestParameters['skipDupCheck'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/feed-posts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeedPostParamsToJSON(requestParameters['createFeedPostParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFeedPost200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async createFeedPost(requestParameters: CreateFeedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateFeedPost200Response> {
        const response = await this.createFeedPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createSubscriptionRaw(requestParameters: CreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSubscriptionAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling createSubscription().'
            );
        }

        if (requestParameters['createAPIUserSubscriptionData'] == null) {
            throw new runtime.RequiredError(
                'createAPIUserSubscriptionData',
                'Required parameter "createAPIUserSubscriptionData" was null or undefined when calling createSubscription().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAPIUserSubscriptionDataToJSON(requestParameters['createAPIUserSubscriptionData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSubscriptionAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async createSubscription(requestParameters: CreateSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSubscriptionAPIResponse> {
        const response = await this.createSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserBadgeRaw(requestParameters: CreateUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserBadge200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling createUserBadge().'
            );
        }

        if (requestParameters['createUserBadgeParams'] == null) {
            throw new runtime.RequiredError(
                'createUserBadgeParams',
                'Required parameter "createUserBadgeParams" was null or undefined when calling createUserBadge().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/user-badges`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserBadgeParamsToJSON(requestParameters['createUserBadgeParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserBadge200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async createUserBadge(requestParameters: CreateUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserBadge200Response> {
        const response = await this.createUserBadgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteCommentRaw(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteComment200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteComment().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['contextUserId'] != null) {
            queryParameters['contextUserId'] = requestParameters['contextUserId'];
        }

        if (requestParameters['isLive'] != null) {
            queryParameters['isLive'] = requestParameters['isLive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteComment200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteComment(requestParameters: DeleteCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteComment200Response> {
        const response = await this.deleteCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteDomainConfigRaw(requestParameters: DeleteDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteDomainConfig200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteDomainConfig().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling deleteDomainConfig().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/domain-configs/{domain}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteDomainConfig200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteDomainConfig(requestParameters: DeleteDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteDomainConfig200Response> {
        const response = await this.deleteDomainConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePageRaw(requestParameters: DeletePageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePageAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deletePage().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/pages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePageAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async deletePage(requestParameters: DeletePageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePageAPIResponse> {
        const response = await this.deletePageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSSOUserRaw(requestParameters: DeleteSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSSOUserAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteSSOUser().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSSOUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['deleteComments'] != null) {
            queryParameters['deleteComments'] = requestParameters['deleteComments'];
        }

        if (requestParameters['commentDeleteMode'] != null) {
            queryParameters['commentDeleteMode'] = requestParameters['commentDeleteMode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/sso-users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSSOUserAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteSSOUser(requestParameters: DeleteSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSSOUserAPIResponse> {
        const response = await this.deleteSSOUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSubscriptionRaw(requestParameters: DeleteSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteSubscriptionAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteSubscription().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteSubscription().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSubscriptionAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteSubscription(requestParameters: DeleteSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteSubscriptionAPIResponse> {
        const response = await this.deleteSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteUserBadgeRaw(requestParameters: DeleteUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserBadge200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling deleteUserBadge().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteUserBadge().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/user-badges/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserBadge200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteUserBadge(requestParameters: DeleteUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserBadge200Response> {
        const response = await this.deleteUserBadgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async flagCommentRaw(requestParameters: FlagCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagComment200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling flagComment().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling flagComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['anonUserId'] != null) {
            queryParameters['anonUserId'] = requestParameters['anonUserId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/comments/{id}/flag`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlagComment200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async flagComment(requestParameters: FlagCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagComment200Response> {
        const response = await this.flagCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAuditLogsRaw(requestParameters: GetAuditLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAuditLogs200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getAuditLogs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = requestParameters['before'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/audit-logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAuditLogs200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAuditLogs(requestParameters: GetAuditLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAuditLogs200Response> {
        const response = await this.getAuditLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCommentRaw(requestParameters: GetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetComment200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getComment().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetComment200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getComment(requestParameters: GetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetComment200Response> {
        const response = await this.getCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCommentsRaw(requestParameters: GetCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetComments200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getComments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['asTree'] != null) {
            queryParameters['asTree'] = requestParameters['asTree'];
        }

        if (requestParameters['skipChildren'] != null) {
            queryParameters['skipChildren'] = requestParameters['skipChildren'];
        }

        if (requestParameters['limitChildren'] != null) {
            queryParameters['limitChildren'] = requestParameters['limitChildren'];
        }

        if (requestParameters['maxTreeDepth'] != null) {
            queryParameters['maxTreeDepth'] = requestParameters['maxTreeDepth'];
        }

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['anonUserId'] != null) {
            queryParameters['anonUserId'] = requestParameters['anonUserId'];
        }

        if (requestParameters['contextUserId'] != null) {
            queryParameters['contextUserId'] = requestParameters['contextUserId'];
        }

        if (requestParameters['hashTag'] != null) {
            queryParameters['hashTag'] = requestParameters['hashTag'];
        }

        if (requestParameters['parentId'] != null) {
            queryParameters['parentId'] = requestParameters['parentId'];
        }

        if (requestParameters['direction'] != null) {
            queryParameters['direction'] = requestParameters['direction'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/comments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetComments200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getComments(requestParameters: GetCommentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetComments200Response> {
        const response = await this.getCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDomainConfigRaw(requestParameters: GetDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDomainConfig200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getDomainConfig().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling getDomainConfig().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/domain-configs/{domain}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDomainConfig200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getDomainConfig(requestParameters: GetDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDomainConfig200Response> {
        const response = await this.getDomainConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDomainConfigsRaw(requestParameters: GetDomainConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDomainConfigs200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getDomainConfigs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/domain-configs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDomainConfigs200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getDomainConfigs(requestParameters: GetDomainConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDomainConfigs200Response> {
        const response = await this.getDomainConfigsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  req tenantId afterId
     */
    async getFeedPostsRaw(requestParameters: GetFeedPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeedPosts200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getFeedPosts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['afterId'] != null) {
            queryParameters['afterId'] = requestParameters['afterId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/feed-posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFeedPosts200ResponseFromJSON(jsonValue));
    }

    /**
     *  req tenantId afterId
     */
    async getFeedPosts(requestParameters: GetFeedPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeedPosts200Response> {
        const response = await this.getFeedPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPageByURLIdRaw(requestParameters: GetPageByURLIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPageByURLIdAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getPageByURLId().'
            );
        }

        if (requestParameters['urlId'] == null) {
            throw new runtime.RequiredError(
                'urlId',
                'Required parameter "urlId" was null or undefined when calling getPageByURLId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['urlId'] != null) {
            queryParameters['urlId'] = requestParameters['urlId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/pages/by-url-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPageByURLIdAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPageByURLId(requestParameters: GetPageByURLIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPageByURLIdAPIResponse> {
        const response = await this.getPageByURLIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPagesRaw(requestParameters: GetPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPagesAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getPages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/pages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPagesAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPages(requestParameters: GetPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPagesAPIResponse> {
        const response = await this.getPagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSSOUserByEmailRaw(requestParameters: GetSSOUserByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSSOUserByEmailAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getSSOUserByEmail().'
            );
        }

        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling getSSOUserByEmail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/sso-users/by-email/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSSOUserByEmailAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async getSSOUserByEmail(requestParameters: GetSSOUserByEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSSOUserByEmailAPIResponse> {
        const response = await this.getSSOUserByEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSSOUserByIdRaw(requestParameters: GetSSOUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSSOUserByIdAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getSSOUserById().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSSOUserById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/sso-users/by-id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSSOUserByIdAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async getSSOUserById(requestParameters: GetSSOUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSSOUserByIdAPIResponse> {
        const response = await this.getSSOUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSSOUsersRaw(requestParameters: GetSSOUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSSOUsers200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getSSOUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/sso-users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSSOUsers200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getSSOUsers(requestParameters: GetSSOUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSSOUsers200Response> {
        const response = await this.getSSOUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSubscriptionsRaw(requestParameters: GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSubscriptionsAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getSubscriptions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSubscriptionsAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async getSubscriptions(requestParameters: GetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSubscriptionsAPIResponse> {
        const response = await this.getSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserBadgeRaw(requestParameters: GetUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserBadge200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getUserBadge().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserBadge().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/user-badges/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserBadge200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserBadge(requestParameters: GetUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserBadge200Response> {
        const response = await this.getUserBadgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserBadgeProgressByIdRaw(requestParameters: GetUserBadgeProgressByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserBadgeProgressById200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getUserBadgeProgressById().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getUserBadgeProgressById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/user-badge-progress/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserBadgeProgressById200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserBadgeProgressById(requestParameters: GetUserBadgeProgressByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserBadgeProgressById200Response> {
        const response = await this.getUserBadgeProgressByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserBadgeProgressByUserIdRaw(requestParameters: GetUserBadgeProgressByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserBadgeProgressById200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getUserBadgeProgressByUserId().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserBadgeProgressByUserId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/user-badge-progress/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserBadgeProgressById200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserBadgeProgressByUserId(requestParameters: GetUserBadgeProgressByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserBadgeProgressById200Response> {
        const response = await this.getUserBadgeProgressByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserBadgeProgressListRaw(requestParameters: GetUserBadgeProgressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserBadgeProgressList200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getUserBadgeProgressList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/user-badge-progress`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserBadgeProgressList200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserBadgeProgressList(requestParameters: GetUserBadgeProgressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserBadgeProgressList200Response> {
        const response = await this.getUserBadgeProgressListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserBadgesRaw(requestParameters: GetUserBadgesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserBadges200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling getUserBadges().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['badgeId'] != null) {
            queryParameters['badgeId'] = requestParameters['badgeId'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['displayedOnComments'] != null) {
            queryParameters['displayedOnComments'] = requestParameters['displayedOnComments'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/user-badges`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserBadges200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserBadges(requestParameters: GetUserBadgesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserBadges200Response> {
        const response = await this.getUserBadgesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchDomainConfigRaw(requestParameters: PatchDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDomainConfig200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling patchDomainConfig().'
            );
        }

        if (requestParameters['domainToUpdate'] == null) {
            throw new runtime.RequiredError(
                'domainToUpdate',
                'Required parameter "domainToUpdate" was null or undefined when calling patchDomainConfig().'
            );
        }

        if (requestParameters['patchDomainConfigParams'] == null) {
            throw new runtime.RequiredError(
                'patchDomainConfigParams',
                'Required parameter "patchDomainConfigParams" was null or undefined when calling patchDomainConfig().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/domain-configs/{domainToUpdate}`.replace(`{${"domainToUpdate"}}`, encodeURIComponent(String(requestParameters['domainToUpdate']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchDomainConfigParamsToJSON(requestParameters['patchDomainConfigParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDomainConfig200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async patchDomainConfig(requestParameters: PatchDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDomainConfig200Response> {
        const response = await this.patchDomainConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchPageRaw(requestParameters: PatchPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchPageAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling patchPage().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling patchPage().'
            );
        }

        if (requestParameters['updateAPIPageData'] == null) {
            throw new runtime.RequiredError(
                'updateAPIPageData',
                'Required parameter "updateAPIPageData" was null or undefined when calling patchPage().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/pages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAPIPageDataToJSON(requestParameters['updateAPIPageData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchPageAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async patchPage(requestParameters: PatchPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchPageAPIResponse> {
        const response = await this.patchPageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchSSOUserRaw(requestParameters: PatchSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatchSSOUserAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling patchSSOUser().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling patchSSOUser().'
            );
        }

        if (requestParameters['updateAPISSOUserData'] == null) {
            throw new runtime.RequiredError(
                'updateAPISSOUserData',
                'Required parameter "updateAPISSOUserData" was null or undefined when calling patchSSOUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['updateComments'] != null) {
            queryParameters['updateComments'] = requestParameters['updateComments'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/sso-users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAPISSOUserDataToJSON(requestParameters['updateAPISSOUserData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchSSOUserAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async patchSSOUser(requestParameters: PatchSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatchSSOUserAPIResponse> {
        const response = await this.patchSSOUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putDomainConfigRaw(requestParameters: PutDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDomainConfig200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling putDomainConfig().'
            );
        }

        if (requestParameters['domainToUpdate'] == null) {
            throw new runtime.RequiredError(
                'domainToUpdate',
                'Required parameter "domainToUpdate" was null or undefined when calling putDomainConfig().'
            );
        }

        if (requestParameters['updateDomainConfigParams'] == null) {
            throw new runtime.RequiredError(
                'updateDomainConfigParams',
                'Required parameter "updateDomainConfigParams" was null or undefined when calling putDomainConfig().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/domain-configs/{domainToUpdate}`.replace(`{${"domainToUpdate"}}`, encodeURIComponent(String(requestParameters['domainToUpdate']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDomainConfigParamsToJSON(requestParameters['updateDomainConfigParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDomainConfig200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async putDomainConfig(requestParameters: PutDomainConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDomainConfig200Response> {
        const response = await this.putDomainConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putSSOUserRaw(requestParameters: PutSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutSSOUserAPIResponse>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling putSSOUser().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling putSSOUser().'
            );
        }

        if (requestParameters['updateAPISSOUserData'] == null) {
            throw new runtime.RequiredError(
                'updateAPISSOUserData',
                'Required parameter "updateAPISSOUserData" was null or undefined when calling putSSOUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['updateComments'] != null) {
            queryParameters['updateComments'] = requestParameters['updateComments'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/sso-users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAPISSOUserDataToJSON(requestParameters['updateAPISSOUserData']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutSSOUserAPIResponseFromJSON(jsonValue));
    }

    /**
     */
    async putSSOUser(requestParameters: PutSSOUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutSSOUserAPIResponse> {
        const response = await this.putSSOUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saveCommentRaw(requestParameters: SaveCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaveComment200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling saveComment().'
            );
        }

        if (requestParameters['createCommentParams'] == null) {
            throw new runtime.RequiredError(
                'createCommentParams',
                'Required parameter "createCommentParams" was null or undefined when calling saveComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['isLive'] != null) {
            queryParameters['isLive'] = requestParameters['isLive'];
        }

        if (requestParameters['doSpamCheck'] != null) {
            queryParameters['doSpamCheck'] = requestParameters['doSpamCheck'];
        }

        if (requestParameters['sendEmails'] != null) {
            queryParameters['sendEmails'] = requestParameters['sendEmails'];
        }

        if (requestParameters['populateNotifications'] != null) {
            queryParameters['populateNotifications'] = requestParameters['populateNotifications'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommentParamsToJSON(requestParameters['createCommentParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaveComment200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async saveComment(requestParameters: SaveCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaveComment200Response> {
        const response = await this.saveCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async saveCommentsBulkRaw(requestParameters: SaveCommentsBulkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<SaveComment200Response>>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling saveCommentsBulk().'
            );
        }

        if (requestParameters['createCommentParams'] == null) {
            throw new runtime.RequiredError(
                'createCommentParams',
                'Required parameter "createCommentParams" was null or undefined when calling saveCommentsBulk().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['isLive'] != null) {
            queryParameters['isLive'] = requestParameters['isLive'];
        }

        if (requestParameters['doSpamCheck'] != null) {
            queryParameters['doSpamCheck'] = requestParameters['doSpamCheck'];
        }

        if (requestParameters['sendEmails'] != null) {
            queryParameters['sendEmails'] = requestParameters['sendEmails'];
        }

        if (requestParameters['populateNotifications'] != null) {
            queryParameters['populateNotifications'] = requestParameters['populateNotifications'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/comments/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createCommentParams']!.map(CreateCommentParamsToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SaveComment200ResponseFromJSON));
    }

    /**
     */
    async saveCommentsBulk(requestParameters: SaveCommentsBulkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<SaveComment200Response>> {
        const response = await this.saveCommentsBulkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unBlockUserFromCommentRaw(requestParameters: UnBlockUserFromCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnBlockCommentPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling unBlockUserFromComment().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling unBlockUserFromComment().'
            );
        }

        if (requestParameters['unBlockFromCommentParams'] == null) {
            throw new runtime.RequiredError(
                'unBlockFromCommentParams',
                'Required parameter "unBlockFromCommentParams" was null or undefined when calling unBlockUserFromComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['anonUserId'] != null) {
            queryParameters['anonUserId'] = requestParameters['anonUserId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/comments/{id}/un-block`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnBlockFromCommentParamsToJSON(requestParameters['unBlockFromCommentParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnBlockCommentPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async unBlockUserFromComment(requestParameters: UnBlockUserFromCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnBlockCommentPublic200Response> {
        const response = await this.unBlockUserFromCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unFlagCommentRaw(requestParameters: UnFlagCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagComment200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling unFlagComment().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling unFlagComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['anonUserId'] != null) {
            queryParameters['anonUserId'] = requestParameters['anonUserId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/comments/{id}/un-flag`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlagComment200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async unFlagComment(requestParameters: UnFlagCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagComment200Response> {
        const response = await this.unFlagCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateCommentRaw(requestParameters: UpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagCommentPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateComment().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateComment().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateComment().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        if (requestParameters['contextUserId'] != null) {
            queryParameters['contextUserId'] = requestParameters['contextUserId'];
        }

        if (requestParameters['doSpamCheck'] != null) {
            queryParameters['doSpamCheck'] = requestParameters['doSpamCheck'];
        }

        if (requestParameters['isLive'] != null) {
            queryParameters['isLive'] = requestParameters['isLive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/comments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlagCommentPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateComment(requestParameters: UpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagCommentPublic200Response> {
        const response = await this.updateCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateFeedPostRaw(requestParameters: UpdateFeedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FlagCommentPublic200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateFeedPost().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFeedPost().'
            );
        }

        if (requestParameters['feedPost'] == null) {
            throw new runtime.RequiredError(
                'feedPost',
                'Required parameter "feedPost" was null or undefined when calling updateFeedPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/feed-posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FeedPostToJSON(requestParameters['feedPost']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlagCommentPublic200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateFeedPost(requestParameters: UpdateFeedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FlagCommentPublic200Response> {
        const response = await this.updateFeedPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserBadgeRaw(requestParameters: UpdateUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateUserBadge200Response>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling updateUserBadge().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateUserBadge().'
            );
        }

        if (requestParameters['updateUserBadgeParams'] == null) {
            throw new runtime.RequiredError(
                'updateUserBadgeParams',
                'Required parameter "updateUserBadgeParams" was null or undefined when calling updateUserBadge().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tenantId'] != null) {
            queryParameters['tenantId'] = requestParameters['tenantId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/api/v1/user-badges/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserBadgeParamsToJSON(requestParameters['updateUserBadgeParams']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateUserBadge200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateUserBadge(requestParameters: UpdateUserBadgeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateUserBadge200Response> {
        const response = await this.updateUserBadgeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
